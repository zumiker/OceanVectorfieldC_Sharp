<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OIV.Inventor.SbLinear</name>
    </assembly>
    <members>
        <member name="T:OIV.Inventor.SbLine">
            <summary>
            Directed line in 3D.
            <para>
            Represents a directed line in 3D. This is a basic Open Inventor datatype that is
            used for representing a 3D line. It is used as input and output by a variety of
            Open Inventor classes.
            </para>
            </summary>
            <seealso cref="T:OIV.Inventor.SbVec3f"/>
            <seealso cref="T:OIV.Inventor.SbPlane"/>
        </member>
        <member name="M:OIV.Inventor.SbLine.#ctor(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Constructor. To struct a line from a position and direction, use <code>SbLine(p0, p0 + dir)</code>. 
            The line is directed from <paramref name="p0"/> to <paramref name="p1"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLine.SetValue(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Sets line to pass through two points.
            </overloads>
            <summary>
            Sets line to pass through points <paramref name="p0"/> and <paramref name="p1"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLine.SetValue(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Sets line to pass through points <paramref name="p0"/> and <paramref name="p1"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLine.SetPosDir(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Sets line using a position and a direction vector.
            </overloads>
            <summary>
            Sets line using a position and a direction vector.
            </summary>
            <remarks>
            The direction vector will be normalized automatically.
            This method is preferred over setValue when the point has very
            large magnitude, for example 1e6, because adding a normalized
            direction vector to such a point may not be significant.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbLine.SetPosDir(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Sets line using a position and a direction vector.
            </summary>
            <remarks>
            The direction vector will be normalized automatically.
            This method is preferred over setValue when the point has very
            large magnitude, for example 1e6, because adding a normalized
            direction vector to such a point may not be significant.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbLine.GetClosestPoints(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Finds the two closest points between this line and <paramref name="line2"/>, and loads them
            into <paramref name="ptOnThis"/> and <paramref name="ptOnLine2"/>.
            </summary>
            <returns>Returns <b>false</b> if the lines are
            parallel (results undefined), and returns <b>true</b> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbLine.GetClosestPoint(OIV.Inventor.SbVec3f)">
            <summary>
            Returns the closest point on the line to the given point.
            </summary>
            <returns>The closest point.</returns>
        </member>
        <member name="M:OIV.Inventor.SbLine.GetPosition">
            <summary>
            Use <see cref="P:OIV.Inventor.SbLine.Position">position property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLine.GetPosition(OIV.Inventor.SbVec3f@)">
            <summary>
            Gets the position of the line.
            </summary>
            <param name="res">Output parameter to store the result.</param>
             <seealso cref="P:OIV.Inventor.SbLine.Position">Position property</seealso>.
        </member>
        <member name="M:OIV.Inventor.SbLine.GetDirection">
            <summary>
            Use <see cref="P:OIV.Inventor.SbLine.Direction">direction property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLine.GetDirection(OIV.Inventor.SbVec3f@)">
            <summary>
            Gets the direction of the line.
            </summary>
            <param name="res">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbLine.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbLine"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of a point along the line and the direction vector.</returns>
        </member>
        <member name="P:OIV.Inventor.SbLine.Position">
            <summary>
            Gets or sets a <see cref="T:OIV.Inventor.SbVec3f">vector</see> indicating indicating
            the position of line origin point.
            </summary>
            <value>Position of line origin point</value>
        </member>
        <member name="P:OIV.Inventor.SbLine.Direction">
            <summary>
            Gets or sets a <see cref="T:OIV.Inventor.SbVec3f">vector</see> indicating the direction of line.
            When setting the direction, the vector value is automatically normalized.
            </summary>
            <value>Direction vector of line.</value>
        </member>
        <member name="T:OIV.Inventor.SbLined">
            <summary>
            Directed line in 3D.
            <para>
            Represents a directed line in 3D. This is a basic Open Inventor datatype that is
            used for representing a 3D line. It is used as input and output by a variety of
            Open Inventor classes.
            </para>
            </summary>
            <seealso cref="T:OIV.Inventor.SbVec3f"/>
            <seealso cref="T:OIV.Inventor.SbPlane"/>
        </member>
        <member name="M:OIV.Inventor.SbLined.#ctor(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Constructor. To struct a line from a position and direction, use <code>SbLine(p0, p0 + dir)</code>. 
            The line is directed from <paramref name="p0"/> to <paramref name="p1"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLined.SetValue(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Sets line to pass through two points.
            </overloads>
            <summary>
            Sets line to pass through points <paramref name="p0"/> and <paramref name="p1"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLined.SetValue(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Sets line to pass through points <paramref name="p0"/> and <paramref name="p1"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLined.SetPosDir(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Sets line using a position and a direction vector.
            </overloads>
            <summary>
            Sets line using a position and a direction vector.
            </summary>
            <remarks>
            The direction vector will be normalized automatically.
            This method is preferred over setValue when the point has very
            large magnitude, for example 1e6, because adding a normalized
            direction vector to such a point may not be significant.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbLined.SetPosDir(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Sets line using a position and a direction vector.
            </summary>
            <remarks>
            The direction vector will be normalized automatically.
            This method is preferred over setValue when the point has very
            large magnitude, for example 1e6, because adding a normalized
            direction vector to such a point may not be significant.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbLined.GetClosestPoints(OIV.Inventor.SbLined,OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <summary>
            Finds the two closest points between this line and <paramref name="line2"/>, and loads them
            into <paramref name="ptOnThis"/> and <paramref name="ptOnLine2"/>.
            </summary>
            <returns>Returns <b>false</b> if the lines are
            parallel (results undefined), and returns <b>true</b> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbLined.GetClosestPoint(OIV.Inventor.SbVec3d)">
            <summary>
            Returns the closest point on the line to the given point.
            </summary>
            <returns>The closest point.</returns>
        </member>
        <member name="M:OIV.Inventor.SbLined.GetPosition">
            <summary>
            Use <see cref="P:OIV.Inventor.SbLined.Position">position property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLined.GetPosition(OIV.Inventor.SbVec3d@)">
            <summary>
            Gets the position of the line.
            </summary>
            <param name="res">Output parameter to store the result.</param>
             <seealso cref="P:OIV.Inventor.SbLined.Position">Position property</seealso>.
        </member>
        <member name="M:OIV.Inventor.SbLined.GetDirection">
            <summary>
            Use <see cref="P:OIV.Inventor.SbLined.Direction">direction property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbLined.GetDirection(OIV.Inventor.SbVec3d@)">
            <summary>
            Gets the direction of the line.
            </summary>
            <param name="res">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbLined.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbLined"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of a point along the line and the direction vector.</returns>
        </member>
        <member name="P:OIV.Inventor.SbLined.Position">
            <summary>
            Gets or sets a <see cref="T:OIV.Inventor.SbVec3d">vector</see> indicating indicating
            the position of line origin point.
            </summary>
            <value>Position of line origin point</value>
        </member>
        <member name="P:OIV.Inventor.SbLined.Direction">
            <summary>
            Gets or sets a <see cref="T:OIV.Inventor.SbVec3d">vector</see> indicating the direction of line.
            When setting the direction, the vector value is automatically normalized.
            </summary>
            <value>Direction vector of line.</value>
        </member>
        <member name="T:OIV.Inventor.Generic.SbNativeArray`1">
            <summary>
            Provides access to unmanaged array from managed code.
            </summary>
            <typeparam name="T">Element type of array. Only value type (structure) are acceptable types.</typeparam>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.StreamIsClosed">
            <summary>
            Stream is closed.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.ArgumentOutOfRange(System.String)">
            <summary>
            Argument is out of range.
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.WrongSizeDetected(System.String)">
            <summary>
            Incompatible size detected.
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.IllegalCastOperation">
            <summary>
            Not enough informations known to perform cast.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.WriteNotSupported">
            <summary>
            Write operation not supported on stream.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.ReadNotSupported">
            <summary>
            Read operation not supported on stream.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.SeekNotSupported">
            <summary>
            Seek operation not supported on stream.
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.pData">
             <summary>
            
             </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.pinningHandle">
            <summary>
            GCHandle of type Pinned
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.m_sizeofElement">
            <summary>
            Size of an element
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.m_isOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.m_size">
            <summary>
            Element count
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.m_capacity">
            <summary>
            Buffer capacity
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbNativeArray`1.m_buffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.SetLength(System.Int64)">
            <summary>
            Sets the current position of the current stream to the given value.
            </summary>
            <param name="length">The length of the stream. This is NOT a byte length but an element length.</param>
            <exception cref="T:System.IO.IOException">An IO exception has occured.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified value exceeds the capacity of the stream.
            -or-
            The specified value is negative.
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the current stream to the given value.
            </summary>
            <param name="offset">The point relative to origin to begin seeking from. This is NOT a byte offset but an element offset.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type <see cref="T:System.IO.SeekOrigin"/>.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Flush">
            <summary>
            Overrides the <see cref="M:System.IO.Stream.Flush"/> method so that no action is performed.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor">
            <summary>
            Create an empty array object.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(System.IntPtr)">
            <overloads>
            Initializes a new instance from an unmanaged memory.
            </overloads>
            <summary>
            Initializes a new instance from an unmanaged memory.
            </summary>
            <remarks>
            The unmanaged memory should be maintained alive as long as 
            this instance is alive.
            </remarks>
            <param name="data">Handle to unmanaged memory stream.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(System.IntPtr,System.Int64)">
            <summary>
            Initializes a new instance from an unmanaged memory.
            </summary>
            <remarks>
            The unmanaged memory should be maintained alive as long as 
            this instance is alive.
            </remarks>
            <param name="data">Handle to unmanaged memory stream.</param>
            <param name="size">Number of initialized elements.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance from an unmanaged memory.
            </summary>
            <remarks>
            The unmanaged memory should be maintained alive as long as 
            this instance is alive.
            </remarks>
            <param name="data">Handle to unmanaged memory stream.</param>
            <param name="size">Number of initialized elements.</param>
            <param name="capacity">Capacity of the stream (in element's count). 
            Capacity must be greater than or equal the <paramref name="size"/></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(System.IntPtr,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance from an unmanaged memory.
            </summary>
            <remarks>
            The unmanaged memory should be maintained alive as long as 
            this instance is alive.
            </remarks>
            <param name="data">Handle to unmanaged memory stream.</param>
            <param name="size">Number of initialized elements.</param>
            <param name="capacity">Capacity of the stream (in element's count). 
            Capacity must be greater than or equal the <paramref name="size"/></param>
            <param name="writable">The setting of the <see cref="P:OIV.Inventor.Generic.SbNativeArray`1.CanWrite"/> property, which determines 
            whether the stream supports writing.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance. 
            This constructor allows to share a managed array with unmanaged code.
            </summary>
            <param name="array">Managed array of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(`0[],System.Boolean)">
            <summary>
            Initializes a new instance. 
            This constructor allows to share a managed array with unmanaged code.
            </summary>
            <param name="array">Managed array of type <typeparamref name="T"/>.</param>
            <param name="writable">The setting of the <see cref="P:OIV.Inventor.Generic.SbNativeArray`1.CanWrite"/> property, which determines 
            whether the stream supports writing.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.#ctor(`0[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance. 
            This constructor allows to share a managed array with unmanaged code.
            </summary>
            <param name="array">Managed array of type <typeparamref name="T"/>.</param>
            <param name="offsetIndex">The buffer position of the first element.</param>
            <param name="writable">The setting of the <see cref="P:OIV.Inventor.Generic.SbNativeArray`1.CanWrite"/> property, which determines 
            whether the stream supports writing.</param>
            <param name="publiclyVisible"><b>true</b> to enable <see cref="M:OIV.Inventor.Generic.SbNativeArray`1.GetBuffer"/>, which returns the managed
            array from which the stream was created; otherwise, <b>false</b>. </param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Finalize">
            <summary>
            Override finalizer.
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.GetBuffer">
            <summary>
            Returns the array of elements of type <typeparamref name="T"/> from which this stream was created. 
            </summary>
            <remarks>
            The <see cref="P:OIV.Inventor.Generic.SbNativeArray&lt;T&gt;.CanGetBuffer">CanGetBuffer</see>
            property indicates if this method call is supposed to return a value. If the buffer is not 
            exposed, an <see cref="T:System.UnauthorizedAccessException"/> is thrown.
            </remarks>
            <returns>
            The element array from which this stream was created, or the underlying array if a managed array was not provided to 
            the SbNativeArray constructor during construction of the current instance.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException"> 
            If buffer is not exposed.
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.ToArray">
            <summary>
            Copy elements in this instance to an array of type <typeparamref name="T"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"> If the object has been instanciated with a managed array. 
            To get a reference to the array, use the <see cref="M:OIV.Inventor.Generic.SbNativeArray`1.GetBuffer"/> method</exception>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.ToArray(System.Int32,System.Int32)">
            <summary>
            Copy elements in this instance to an array of type element type.
            </summary>
            <param name="offset">The zero-based offset in buffer at which to begin copying the element read from the current stream.</param>
            <param name="count">Number of elements to copy</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset parameter is less than zero.
            - or - 
            The count parameter is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">The stream has been instanciated using a managed array.
            Use the <see cref="M:OIV.Inventor.Generic.SbNativeArray`1.GetBuffer"/> method to get a reference on managed array used by the stream.</exception>
            <exception cref="T:System.ArgumentException">The length of the buffer array minus the offset parameter is less than the count parameter.
            </exception>
            <returns>An array of elements of type <typeparamref name="T"/>. If this instance is empty, the returned array is empty and has a zero length. </returns>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes into the specified array and advances the position within the 
            stream by the number of bytes read.
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array 
            with the values between offset and (offset + count - 1) replaced by the bytes read 
            from the current source. This parameter is passed uninitialized.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing 
            the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the 
            number of bytes requested if that many bytes are not currently available, 
            or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Stream is closed.</exception>
            <exception cref="T:System.NotSupportedException">The underlying memory does not support reading. The <see cref="P:OIV.Inventor.Generic.SbNativeArray`1.CanRead"/> property is set to <b>false</b>. </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buffer"/> parameter is set to a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset parameter is less than zero. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count parameter is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Invalid offset.</exception>
            <exception cref="T:System.ArgumentException">Invalid count. <paramref name="count"/> must be a multiple of element size.</exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Read">
            <summary>
            Read one element from current stream position and advances the position within the 
            stream by 1.
            </summary>
            <returns>The element read on success, null otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Read(System.Nullable{`0}@)">
            <summary>
            Read one element from current stream position and advances the position within the 
            stream by 1.
            </summary>
            <param name="value"> Out parameter assigned to read value. <paramref name="value"/> is null if read failed.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.ReadBlock(`0[],System.Int32,System.Int32)">
            <summary>
            Copies element from the current stream to an array and advances the position within the 
            stream by the number of elements read.
            </summary>
            <param name="buffer">The buffer to which element are copied.</param>
            <param name="offset">The element offset in the buffer at which to begin writing elements.</param>
            <param name="count">The number of elements to be read. </param>
            <returns>The total number of elements read into array. This can be less than the number of 
            elements requested if that many elements aren't currently available, or 0 if the end 
            of the stream has been reached before any data can be read. </returns>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.WriteBlock(`0[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of elements to the current stream and advances the current position within this stream by the number of elements written.
            </summary>
            <param name="buffer">An array of elements. This method copies count elements from buffer to the current stream. </param>
            <param name="offset">The zero-based element offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Write(OIV.Inventor.Generic.SbNativeArray{`0},System.Int32,System.Int32)">
            <summary>
            Copy elements from the <paramref name="source"/> array. Use the current <see cref="P:OIV.Inventor.Generic.SbNativeArray`1.Position"/>
            as start position.
            </summary>
            <param name="source">Source object.</param>
            <param name="offset">Element offset in source object.</param>
            <param name="count"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Write(`0)">
            <summary>
            Copy an element to current stream position and advances the current position within this stream by 1.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Copy(OIV.Inventor.Generic.SbNativeArray{`0},OIV.Inventor.Generic.SbNativeArray{`0},System.Int32)">
            <summary>
            Copy elements from source to destination array. 
            <see cref="P:OIV.Inventor.Generic.SbNativeArray`1.Position">Positions</see> remain unchanged in source and destination object.
            </summary>
            <param name="source">Source array.</param>
            <param name="destination">Destination array.</param>
            <param name="count">Number of elements to copy.</param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Copy(OIV.Inventor.Generic.SbNativeArray{`0},System.Int32,OIV.Inventor.Generic.SbNativeArray{`0},System.Int32,System.Int32)">
            <summary>
            Copy <paramref name="count"/> elements from source (starting at <paramref name="sourceIndex"/>) to destination 
            (starting at <paramref name="destinationIndex"/>).
            </summary>
            <param name="source">Source object</param>
            <param name="sourceIndex">Start element for copy</param>
            <param name="destination">Destination object</param>
            <param name="destinationIndex">Start element for copy</param>
            <param name="count">Number of elements to copy</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> or <paramref name="destination"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> or <paramref name="destinationIndex"/> are not valid.</exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OIV.Inventor.Generic.SbNativeArray`1"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; 
            <b>false</b> to release only unmanaged resources. </param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.DisposeInternal(System.Boolean)">
            <summary>
            Internal method. This method is not intented to be used directly in your code.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Boolean}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of boolean.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Boolean">bool</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Byte}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of byte.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Byte">byte</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Char}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of char.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Char">char</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Double}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of double.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Double">double</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Int16}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of short.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Int16">short</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Int32}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of integer.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Int32">int</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Int64}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of long.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Int64">long</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.SByte}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of signed byte.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.SByte">sbyte</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.Single}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of float.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.Single">float</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.UInt16}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of unsigned short.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.UInt16">ushort</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.UInt32}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of unsigned integer.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.UInt32">uint</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{System.UInt64}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of unsigned long.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;<see cref="T:System.UInt64">ulong</see>&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec2f}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec2f"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec2f&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec2d}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec2d"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec2d&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec2s}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec2s"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec2s&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec2i32}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec2i32"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec2i32&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec3f}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec3f"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec3f&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec3d}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec3d"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec3d&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec3s}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec3s"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec3s&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec3i32}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec3i32"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec3i32&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4b}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4b"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4b&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4d}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4d"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4d&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4f}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4f"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4f&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4i32}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4i32"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4i32&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4s}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4s"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4s&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4ub}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4ub"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4ub&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4ui32}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4ui32"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4ui32&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbVec4us}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbVec4us"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbVec4us&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbColor}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbColor"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbColor&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbColorRGBA}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbColorRGBA"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbColorRGBA&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbPlane}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbPlane"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbPlane&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbTime}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbTime"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbTime&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbRotation}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbRotation"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbRotation&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="M:OIV.Inventor.Generic.SbNativeArray`1.op_Explicit(OIV.Inventor.Generic.SbNativeArray{`0})~OIV.Inventor.Generic.SbNativeArray{OIV.Inventor.SbMatrix}">
            <summary>
            Explicit cast operator to convert an native array of <typeparamref name="T"/> to a
            native array of <see cref="T:OIV.Inventor.SbMatrix"/>.
            </summary>
            <param name="toCast">Native array to convert.</param>
            <returns>An instance of SbNativeArray&lt;SbMatrix&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>If native array to cast is not well known.</para>
            <para>-or-</para>
            <para>If size are incompatible.</para>
            <para>-or-</para>
            <para>If the source array has been instanciated with a managed array.</para>
            </exception>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.HasManagedBuffer">
            <summary>
            Convenient property to test if the instance wraps
            a managed buffer.
            </summary>
            <remarks>
            The <see cref="P:CanGetBuffer"/> can returns <b>false</b> even
            if <see cref="P:HasManagedBuffer"/> returns true.
            When using explicit cast operators, we lost the original managed buffer
            reference but we keep a pin handle on original buffer in instance resulting 
            from the cast.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.WellKnown">
            <summary>
            Tells if the object has been instantiated with correct 
            informations about element size and capacity.
            </summary>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value><b>true</b> if the stream supports reading; <b>false</b> if the stream is closed or was opened with write-only access.</value>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value><b>true</b> if the stream is open.</value>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value><b>true</b> if the stream supports writing; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.Length">
            <summary>
            Gets a 64-bit integer that represents the total number of elements of the <see cref="T:OIV.Inventor.Generic.SbNativeArray`1"/>.
            </summary>
            <value>A 64-bit integer that represents the total number of elements of the <see cref="T:OIV.Inventor.Generic.SbNativeArray`1"/>.</value>
            <exception cref="T:System.ObjectDisposedException">If the stream is closed.</exception>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.Int32Length">
            <summary>
            Gets a 32-bit integer that represents the total number of elements of the <see cref="T:OIV.Inventor.Generic.SbNativeArray`1"/>.
            </summary>
            <value>A 32-bit integer that represents the total number of elements of the <see cref="T:OIV.Inventor.Generic.SbNativeArray`1"/>.</value>
            <exception cref="T:System.ObjectDisposedException">If the stream is closed.</exception>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <value>The current position within the stream.</value>
            <exception cref="T:System.ObjectDisposedException">If the stream is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a negative 
            value or a value greater than <see cref="F:System.Int64.MaxValue">MaxValue</see>. </exception>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.DataPointer">
            <summary>
            Pointer to the underlying native array.
            </summary>
            <remarks>
            <para>
            The returned pointer can be used in an unsafe code block
            to iterate thought the elements.
            </para>
            <para>
            The property will return a valid result even if the stream
            has been build with a managed array as input parameter.
            The following code should initialize the stream build over a managed array.
            <code>
            float[] floatArray = new float[100];
            SbNativeArray&lt;float&gt; floatBuffer = new SbNativeArray&lt;float&gt;(floatArray, true);
            unsafe
            {
              float* floatPtr = (float*) floatBuffer.DataPointer;
              for (int i = 0; i &lt; floatArray.Length; i++ )
              {
                *floatPtr++ = 10.2f;
              }
            }
            </code>
            </para>
            <para>
            As read/write operation may occur in an unsafe block, 
            no check will be performed to know if the buffer supports
            read/write access.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Stream is closed.</exception>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.IsDataOwner">
            <summary>
            Flags which indicates if pointer to data is own by current object
            or not.
            </summary>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.ByteSize">
            <summary>
            Size in bytes of the buffer
            </summary>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.ByteCapacity">
            <summary>
            Capacity in bytes of the buffer.
            </summary>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <remarks>
            <para>
            If you iterates thought a significant number of elements using this indexer,
            you may encounter performance issue if the underlying buffer is not a managed buffer
            (<see cref="P:OIV.Inventor.Generic.SbNativeArray&lt;T&gt;.CanGetBuffer">CanGetBuffer</see>
            returns <b>false</b>).
            </para>
            <para>
            For better performances, you can consider using the 
            <see cref="P:OIV.Inventor.Generic.SbNativeArray&lt;T&gt;.DataPointer">DataPointer</see>
            property combined with unsafe code to access/modify the underlying native buffer.
            </para>
            </remarks>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element of type <typeparamref name="T"/> at the specified index.</returns>
            <exception cref="T:System.InvalidOperationException">If the native array is not well known.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
            <exception cref="T:System.NotSupportedException">
            If stream is closed.
            - or -
            If read/write operation are not supported.
            </exception>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.CanGetBuffer">
            <summary>
            Gets a flag indicating if it is legacy to call 
            <see cref="M:OIV.Inventor.Generic.SbNativeArray&lt;T&gt;.GetBuffer">GetBuffer</see> method.
            </summary>
            <remarks>
            Returns <b>true</b> if it's legal, <b>false</b> otherwise.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.Generic.SbNativeArray`1.Buffer">
            <summary>
            Do not check buffer visibility. Internal use only.
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbCylinder">
            <summary>
            Class for representing a cylinder. </summary>
            <remarks>
            This class defines a simple cylinder datatype. It is used by the Open Inventor 
            toolkit for arguments or return values.	 
            </remarks>
            <seealso cref="T:OIV.Inventor.SbVec3f"/> 
            <seealso cref="T:OIV.Inventor.SbLine"/>  
            <seealso cref="T:OIV.Inventor.SbPlane"/>  
            <seealso cref="T:OIV.Inventor.SbSphere"/>  
            <seealso cref="T:OIV.Inventor.Nodes.SoCylinder"/>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.#ctor(OIV.Inventor.SbLine,System.Single)">
            <summary>
            Constructor that takes an axis and radius.
            </summary>
            <param name="a">Cylinder axis.</param>
            <param name="r">Cylinder radius.</param>
            <seealso cref="M:OIV.Inventor.SbCylinder.SetValue(OIV.Inventor.SbLine,System.Single)"/>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.SetValue(OIV.Inventor.SbLine,System.Single)">
            <summary>
            Changes the axis and radius.
            </summary>
            <param name="a">Cylinder axis.</param>
            <param name="r">Cylinder radius.</param>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.SetAxis(OIV.Inventor.SbLine)">
            <summary>
            Use Axis property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.SetRadius(System.Single)">
            <summary>
            Use Radius property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.GetAxis">
            <summary>
            Use Axis property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.GetRadius">
            <summary>
            Use Radius property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.Intersect(OIV.Inventor.SbLine@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Intersect line and cylinder.
            </overloads>
            <summary>
            Intersect line and cylinder, returning true if there is an intersection.
            </summary>
            <param name="line">Intersecting line.</param>
            <param name="intersection">Output parameter to store the intersection point</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
            <seealso cref="M:OIV.Inventor.SbCylinder.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)"/>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect line and cylinder, returning true if there is an intersection.
            </summary>
            <param name="line">Intersecting line.</param>
            <param name="intersection">Output parameter to store the intersection point</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
            <seealso cref="M:OIV.Inventor.SbCylinder.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)"/>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.Intersect(OIV.Inventor.SbLine@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect line and cylinder, returning <b>true</b> if there is an intersection.
            </summary>
            <param name="line">Line for testing intersection.</param>
            <param name="enter">Output parameter to store the first intersection point if any.</param>
            <param name="exit">Output parameter to store the last intersection point if any.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect line and cylinder, returning <b>true</b> if there is an intersection.
            </summary>
            <param name="line">Line for testing intersection.</param>
            <param name="enter">Output parameter to store the first intersection point if any.</param>
            <param name="exit">Output parameter to store the last intersection point if any.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbCylinder.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbCylinder"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the axis vector and the radius.</returns>
        </member>
        <member name="P:OIV.Inventor.SbCylinder.Axis">
            <summary>
            Gets or sets the cylinder axis.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbCylinder.Radius">
            <summary>
            Gets or sets the cylinder radius.
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbViewportRegion">
            <summary>
            Class for representing a viewport. 
            <para>
            This class represents the active viewport region in a display 
            window. It contains the screen-space size of the window as 
            well as the origin and size of the viewport within the window. 
            By default, the viewport is the same as the full window. 
            Methods allow the viewport to be set either in terms of 
            screen-space pixels or as normalized coordinates, where (0,0) 
            is the lower-left corner of the window and (1,1) 
            is the upper-right corner. 
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbViewportRegion.Default">
            <summary>
            Provide a default viewport region equivalent to <code>new SbViewportRegion(100,100,1)</code>
            <remarks> Note to developper who comes from C++. As .NET framework does not 
            allow to define a parameterless constructor for struct, use this field to keep
            the same behavior. When you write <code>SbViewportRegion viewport = new SbViewportRegion()</code> > 
            all internal fields are zeroed. Writing <code>SbViewportRegion viewport = SbViewportRegion.Default</code>
            ensures you to have an equivalent object.</remarks>
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructor that takes a width and a height.
            </summary>
            <param name="width">Width of viewport (pixel size).</param>
            <param name="height">Height of viewport (pixel size).</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.#ctor(System.Int16,System.Int16,System.Single)">
            <summary>
            Constructor that takes a width and a height and a scale.
            Used for remote rendering.
            </summary>
            <param name="width">Width of viewport (pixel size).</param>
            <param name="height">Height of viewport (pixel size).</param>
            <param name="newScale">Viewport scale.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.#ctor(OIV.Inventor.SbVec2s)">
            <summary>
            Constructor that takes a window size.
            </summary>
            <param name="winSize">Viewport size in pixels.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.#ctor(OIV.Inventor.SbVec2s,System.Single)">
            <summary>
            Constructor that takes a window size and a scale. 
            Use for remote rendering.
            </summary>
            <param name="winSize">Viewport size.</param>
            <param name="newScale">Viewport scale.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.#ctor(OIV.Inventor.SbVec2i32)">
            <summary>
            Constructor that takes a window size.
            </summary>
            <param name="winSize">Viewport size.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.#ctor(OIV.Inventor.SbVec2i32,System.Single)">
            <summary>
            Constructor that takes a window size and a scale. 
            Use for remote rendering.
            </summary>
            <param name="winSize">Viewport size.</param>
            <param name="newScale">Viewport scale.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetWindowSize(System.Int16,System.Int16)">
            <summary>
            Changes window size to given width and height in pixels.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetWindowSize(OIV.Inventor.SbVec2s@)">
            <overloads>
            Changes window size. 
            </overloads>
            <summary>
            Changes window size to given width and height in pixels, given as <see cref="T:OIV.Inventor.SbVec2s"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetWindowSize(OIV.Inventor.SbVec2s)">
            <summary>
            Changes window size to given width and height in pixels, given as <see cref="T:OIV.Inventor.SbVec2s"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetWindowSize(OIV.Inventor.SbVec2i32@)">
            <summary>
            Changes window size to given width and height in pixels, given as <see cref="T:OIV.Inventor.SbVec2i32"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetWindowSize(OIV.Inventor.SbVec2i32)">
            <summary>
            Changes window size to given width and height in pixels, given as <see cref="T:OIV.Inventor.SbVec2i32"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets viewport to given region, specified as normalized window coordinates: (0,0) 
            is the lower-left corner, (1,1) is the upper-right.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewport(OIV.Inventor.SbVec2f@,OIV.Inventor.SbVec2f@)">
            <overloads>
            Sets viewport to region.
            </overloads>
            <summary>
            Sets viewport to region with given origin (lower-left corner) 
            and size, given as normalized coordinate vectors.
            </summary>
            <param name="origin">Origin of viewport.</param>
            <param name="size">Size of viewport.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewport(OIV.Inventor.SbVec2f,OIV.Inventor.SbVec2f)">
            <summary>
            Sets viewport to region with given origin (lower-left corner) 
            and size, given as normalized coordinate vectors.
            </summary>
            <param name="origin">Origin of viewport.</param>
            <param name="size">Size of viewport.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewportPixels(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets viewport to given region, specified as pixel coordinates 
            in window: (0,0) is the lower-left corner.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewportPixels(OIV.Inventor.SbVec2s@,OIV.Inventor.SbVec2s@)">
            <overloads>
            Sets viewport to region.
            </overloads>
            <summary>
            Sets viewport to region with given origin (lower-left corner) 
            and size, given as pixel coordinates.
            </summary>
            <param name="origin">Origin of viewport.</param>
            <param name="size">Pixel's size of viewport.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewportPixels(OIV.Inventor.SbVec2s,OIV.Inventor.SbVec2s)">
            <summary>
            Sets viewport to region with given origin (lower-left corner) 
            and size, given as pixel coordinates.
            </summary>
            <param name="origin">Origin of viewport.</param>
            <param name="size">Pixel's size of viewport.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewportPixels(OIV.Inventor.SbVec2i32@,OIV.Inventor.SbVec2i32@)">
            <summary>
            Sets viewport to region with given origin (lower-left corner) 
            and size, given as pixel coordinates.
            </summary>
            <param name="origin">Origin of viewport.</param>
            <param name="size">Pixel's size of viewport.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetViewportPixels(OIV.Inventor.SbVec2i32,OIV.Inventor.SbVec2i32)">
            <summary>
            Sets viewport to region with given origin (lower-left corner) 
            and size, given as pixel coordinates.
            </summary>
            <param name="origin">Origin of viewport.</param>
            <param name="size">Pixel's size of viewport.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetWindowSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.WindowSize"/> property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetWindowSize_i32">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.WindowSizeI32"/> property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetViewportOrigin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.ViewportOrigin"/> property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetViewportOriginPixels_i32">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.ViewportOriginPixelsI32"/> property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetViewportSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.ViewportSize"/> property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetViewportSizePixels">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.ViewportSizePixels"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetViewportSizePixels_i32">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.ViewportSizePixelsI32"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetViewportAspectRatio">
            <summary>
            Use <see cref="P:OIV.Inventor.SbViewportRegion.ViewportAspectRatio"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.ScaleWidth(System.Single)">
            <summary>
            Scales viewport within window to be the given <paramref name="ratio"/> of its current width, 
            leaving the resulting viewport centered about the same point as the current one.
            </summary>
            <param name="ratio">Width viewport ratio.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.ScaleHeight(System.Single)">
            <summary>
            Scales viewport within window to be the given <paramref name="ratio"/> of its current 
            height, leaving the resulting viewport centered about the same point as the 
            current one.
            </summary>
            <param name="ratio">Height viewport ratio.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.SetPixelsPerInch(System.Single)">
            <summary>
            Sets the pixel-per-inch ratio for the display device the viewport is 
            part of. The default value is 72 (1 pixel per printer's point).
            </summary>
            <param name="ppi">Pixel-per-inch ratio.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetPixelsPerInch">
            <summary>
            Returns the pixel-per-inch ratio for the display device the viewport is 
            part of.
            </summary>
            <returns>Pixel-per-inch ratio.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetPixelsPerPoint">
            <summary>
            Convenience function that returns number of pixels per printer's point.
            </summary>
            <returns>Number of pixels per printer's point.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbViewportRegion"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.op_Equality(OIV.Inventor.SbViewportRegion,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewportRegion.op_Inequality(OIV.Inventor.SbViewportRegion,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.WindowSize">
            <summary>
            Window size in pixels (short values).
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.WindowSizeI32">
            <summary>
            Window size in pixels (int values).
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.ViewportOrigin">
            <summary>
            Viewport origin in normalized coordinates.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.ViewportOriginPixelsI32">
            <summary>
            Viewport origin in pixels (int values).
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.ViewportSize">
            <summary>
            Viewport size in normalized coordinates.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.ViewportSizePixels">
            <summary>
            Viewport size in pixels (short values).
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.ViewportSizePixelsI32">
            <summary>
            Viewport size in pixels (int values).
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbViewportRegion.ViewportAspectRatio">
            <summary>
            Aspect ratio (width/height) of viewport.
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbTrackerInfo">
            <summary>
            Class for representing 3D tracker information.
            </summary>
            <remarks>
            <para>
            An object that stores information about the state of a 3D tracker device,
            specifically position and orientation.
            </para>
            <para>
              A "tracker" is any device whose position and orientation are dynamically tracked
              in 3D, typically for immersive VR applications. For example: a head tracker. A
              "controller" is an input device which typically has buttons and/or valuators
              (e.g. a joystick). Many controllers have an associated tracker. For example, the
              commonly used "wand" input device has three buttons, a two-axis joystick (two
              valuators), and an associated tracker.
            </para>  
            <para>
              The virtual method <see cref="M:OIV.Inventor.Events.SoEvent.GetTrackerInfo"/> can 
              be used to determine if an event object has associated tracker information. 
              Traditional 2D events like <see cref="T:OIV.Inventor.Events.SoMouseButtonEvent"/> and 
              <see cref="T:OIV.Inventor.Events.SoLocation2Event"/> return <see langword="null"/>. 
              3D events like <see cref="T:OIV.Inventor.Events.SoTrackerEvent"/> and 
              <see cref="T:OIV.Inventor.Events.SoControllerButtonEvent"/> return their associated
              tracker information (SbTrackerInfo).
            </para>  
            <para>
              In addition to the usual methods for setting an orientation, this class provides
              a method that takes three Euler angles specified in radians. This allows
              orientation information returned by the widely used trackd™ API to be stored
              directly into an Open Inventor event object.
            </para>
            <para>
              Tracker info is most often used by Open Inventor classes to specify a direction
              for picking or intersection with a dragger. This class provides the
              <see cref="M:OIV.Inventor.SbTrackerInfo.GetRay"/> method to conveniently get an 
              <see cref="T:OIV.Inventor.SbLine"/> defining the direction the tracker is pointing.
            </para>  
            </remarks> 
            <seealso cref="T:OIV.Inventor.Events.SoControllerButtonEvent"/>
            <seealso cref="T:OIV.Inventor.Events.SoEvent"/>
            <seealso cref="T:OIV.Inventor.Events.SoTrackerEvent"/>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetPosition3(OIV.Inventor.SbVec3f)">
            <summary>
            This method is marked obsolete. Use <see cref="P:OIV.Inventor.SbTrackerInfo.Position3"/> property instead.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.GetPosition3">
            <summary>
            This method is marked obsolete. Use <see cref="P:OIV.Inventor.SbTrackerInfo.Position3"/> property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.GetOrientation">
            <summary>
            This method is marked obsolete. 
            Use <see cref="P:OIV.Inventor.SbTrackerInfo.Orientation"/> property instead.
            </summary>
            <returns>Tracker orientation.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetOrientation(OIV.Inventor.SbRotation)">
            <summary>
            This method is marked obsolete. 
            Use <see cref="P:OIV.Inventor.SbTrackerInfo.Orientation"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.GetOrientation(OIV.Inventor.SbVec3f@,System.Single@)">
            <summary>
            Get orientation of tracker.
            </summary>
            <param name="axis">Output parameter for the axis.</param>
            <param name="angle">Output parameter for the angle.</param>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetOrientation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set orientation value from 4 floats defining the rotation quaternion.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetOrientation(System.Single[])">
            <summary>
            Set orientation value from array of 4 floats defining the rotation quaternion.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetOrientation(OIV.Inventor.SbVec3f@,System.Single)">
            <overloads>
            Set orientation value from axis and angle in radians.
            </overloads>
            <summary>
            Set orientation value from axis and angle in radians.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetOrientation(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Set orientation value from axis and angle in radians.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.SetOrientation(System.Single,System.Single,System.Single)">
            <summary>
            Set orientation value from Euler angles in radians
            (using the trackd™ convention Z*X*Y).
            </summary>
            <param name="xangle">Rotation in radians around Z axis.</param>
            <param name="yangle">Rotation in radians around X axis.</param>
            <param name="zangle">Rotation in radians around Y axis.</param>
        </member>
        <member name="M:OIV.Inventor.SbTrackerInfo.GetRay">
            <summary>
            Convenience function to get ray for picking/intersecting.
            </summary>
            <returns>Ray for picking/intersecting.</returns>
        </member>
        <member name="F:OIV.Inventor.SbTrackerInfo.m_data">
            <summary>
            Kept to have the same size between unmanaged and managed code
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbTrackerInfo.Position3">
            <summary>
            Gets or sets the Position of tracker in world coordinates.
            </summary>
            <value>Position of tracker in world coordinates.</value>
        </member>
        <member name="P:OIV.Inventor.SbTrackerInfo.Orientation">
            <summary>
            Gets or sets the orientation of tracker as a standard Open Inventor rotation.
            </summary>
            <value>Orientation of tracker.</value>
        </member>
        <member name="T:OIV.Inventor.SbPlane">
            <summary>
            Oriented plane in 3D.
            <para>
            Represents an oriented plane in 3D. This is a lightweight class/datatype that is
            used for arguments to some Open Inventor objects.
            </para>
            <see cref="T:OIV.Inventor.SbVec3f"/>
            <see cref="T:OIV.Inventor.SbLine"/>
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbPlane.#ctor(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Construct a plane given 3 points <paramref name="p0"/> <paramref name="p1"/> <paramref name="p2"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbPlane.#ctor(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Construct a plane given normal and distance from origin 
            <param name="d"/> along normal <param name="n"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbPlane.#ctor(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Construct a plane given normal <paramref name="n"/> and a point <paramref name="p"/> 
            to pass through.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbPlane.Offset(System.Single)">
            <summary>
            Offset a plane by a given <paramref name="d">distance</paramref>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbPlane.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect a line <paramref name="l"/> with the plane.
            </summary>
            <param name="l">Intersecting line.</param>
            <param name="intersection">Output parameter to store the resulting intersection</param>
            <returns><b>true</b> on success, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.Transform(OIV.Inventor.SbMatrix)">
            <summary>
            Transform a plane by the given <paramref name="matrix"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbPlane.IsInHalfSpace(OIV.Inventor.SbVec3f)">
            <summary>
            Tests if the given point is within the half-space 
            defined by the plane.
            </summary>
            <param name="point"></param>
            <returns><b>true</b> if if the given point is within the half-space 
            defined by the plane, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.GetNormal(OIV.Inventor.SbVec3f@)">
            <summary>
            This method is marked obsolete. Use <see cref="P:OIV.Inventor.SbPlane.Normal"/> 
            property instead.
            </summary>
            <param name="normal">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbPlane.GetDistanceFromOrigin">
            <summary>
            This method is marked obsolete. Use <see cref="P:OIV.Inventor.SbPlane.DistanceFromOrigin"/> 
            property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbPlane"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbPlane"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of plane's normal and distance from origin.</returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.op_Equality(OIV.Inventor.SbPlane,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="plane1"/> and <paramref name="plane2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbPlane.op_Inequality(OIV.Inventor.SbPlane,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="plane1"/> and <paramref name="plane2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbPlane.Normal">
            <summary>
            Gets the normal vector to plane.
            </summary>
            <value>Normal vector to plane.</value>
        </member>
        <member name="P:OIV.Inventor.SbPlane.DistanceFromOrigin">
            <summary>
            Gets the distance from origin.
            </summary>
            <value>Distance from origin.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox3s">
            <summary>
            3D box class which has planes parallel to the major axes and is specified by two 
            points on a diagonal. 
            </summary>
            <remarks>
            This class is part of the standard Open Inventor 
            datatype classes and is used as input and output to 
            geometry operations (<see cref="T:OIV.Inventor.Actions.SoGetBoundingBoxAction"/>). 
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox3s.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <overloads>
            Constructor for a 3D short box.
            </overloads>
            <summary>
            Constructor for a 3D short box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="zmin"/>, <paramref name="xmax"/>, <paramref name="ymax"/> and 
            <paramref name="zmax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
            <seealso cref="M:OIV.Inventor.SbBox3s.SetBounds(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.#ctor(OIV.Inventor.SbVec3s,OIV.Inventor.SbVec3s)">
            <summary>
            Constructor for a 3D short box. 
            <paramref name="min"/> and <paramref name="max"/> are the corners of the 
            diagonal that define the box.
            </summary>
            <seealso cref="M:OIV.Inventor.SbBox3s.SetBounds(OIV.Inventor.SbVec3s,OIV.Inventor.SbVec3s)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3s.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3s.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3s.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetCenter">
            <summary>
            Gets the center of the box.
            </summary>
            <returns>Center of the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.ExtendBy(OIV.Inventor.SbVec3s@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            <summary>
            Extends this box (if necessary) to contain the specified point <paramref name="pt"/>.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.ExtendBy(OIV.Inventor.SbVec3s)">
            <summary>
            Extends this box (if necessary) to contain the specified point <paramref name="pt"/>.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.ExtendBy(OIV.Inventor.SbBox3s@)">
            <summary>
            Extends this box (if necessary) to contain the specified box <paramref name="bb"/>.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.ExtendBy(OIV.Inventor.SbBox3s)">
            <summary>
            Extends this box (if necessary) to contain the specified box <paramref name="bb"/>.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Intersect(OIV.Inventor.SbVec3s@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Intersect(OIV.Inventor.SbVec3s)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Intersect(OIV.Inventor.SbBox3s@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Intersect(OIV.Inventor.SbBox3s)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Intersection(OIV.Inventor.SbBox3s)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Contains(OIV.Inventor.SbBox3s)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Outside(OIV.Inventor.SbMatrix@,System.Int32@)">
            <overloads>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given.
            </overloads>
            <summary>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </summary>
            <remarks>
            <para>
            <paramref name="cullBits"/> keeps track of which view-volume clipping planes 
            the box is completely inside of; if a 'parent' bounding box of this 
            bounding box was found to be completely inside the left/right clipping 
            planes, the low bit of cullBits will be set to zero, and this routine 
            will not test this box against those planes. 
            </para>
            <para>
            When cullBits is zero, it is a waste of time to call this function!  
            Before calling this the first time, set cullBits to 7 
            (<see cref="T:OIV.Inventor.Actions.SoGLRenderAction"/> and 
            <see cref="T:OIV.Inventor.Nodes.SoSeparator"/> will handle this automatically 
            for render culling).
            </para>
            </remarks>
            <param name="MVP">Model + view + projection matrix.</param>
            <param name="cullBits">Keeps track of which view-volume clipping planes 
            the box is completely inside of. Set <paramref name="cullBits"/> to 7 when calling
            this method for the first time.</param>
            <returns><b>true</b> if this box is completely outside, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Outside(OIV.Inventor.SbMatrix,System.Int32@)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3s.Outside(OIV.Inventor.SbMatrix@,System.Int32@)"/> for more details.
            </summary>
            <param name="MVP"></param>
            <param name="cullBits"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.SetBounds(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.SetBounds(OIV.Inventor.SbVec3s@,OIV.Inventor.SbVec3s@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.SetBounds(OIV.Inventor.SbVec3s,OIV.Inventor.SbVec3s)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetBounds(System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <overloads>Gets the corners of the box.</overloads>
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetBounds(OIV.Inventor.SbVec3s@,OIV.Inventor.SbVec3s@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetClosestPoint(OIV.Inventor.SbVec3f)">
            <summary>
            Returns the closest point on the box to the given <paramref name="point"/>. 
            Returns the point on the center of the Z face if passed the center.
            </summary>
            <param name="point">Point coordinates.</param>
            <returns>Closest point on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetOrigin(System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
            <param name="originZ">Z coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetSize(System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
            <param name="sizeZ">Size along z axis</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox3s.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.HasVolume">
            <summary>
            Tests if the box defines a volume (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if all three dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetSpan(OIV.Inventor.SbVec3f,System.Single@,System.Single@)">
            <summary>
            Finds the span of a box along a specified <paramref name="direction"/>. 
            </summary>
            <remarks>
            The span is the total 
            distance the box occupies along a given direction. The total distance is 
            returned in the form of a minimum and maximum distance from the origin of each 
            of the corners of the box along the given direction. The difference between 
            these two values is the span.
            </remarks>
            <param name="direction">Span direction.</param>
            <param name="dMin">Minimum distance.</param>
            <param name="dMax">Maximum distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Transform(OIV.Inventor.SbMatrix@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Transform(OIV.Inventor.SbMatrix)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetVolume">
            <summary>
            Computes the volume of the box.
            </summary>
            <returns>Volume of the box, 0 if box is <see cref="P:OIV.Inventor.SbBox3s.Empty"/></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox3s"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox3s"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.op_Equality(OIV.Inventor.SbBox3s,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3s.op_Inequality(OIV.Inventor.SbBox3s,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox3s.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3s.Max">
            <summary>
            Gets the maximum point of the box. 
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3s.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox3s.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox3i32">
            <summary>
            3D box class. 
            </summary>
            <remarks>
            3D box which has planes parallel to the major axes and is specified by two 
            points on a diagonal. This class is part of the standard Open Inventor 
            datatype classes and is used as input and output to 
            geometry operations (<see cref="T:OIV.Inventor.Actions.SoGetBoundingBoxAction"/>). 
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox3i32.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            Constructor for a 3D int box.
            </overloads>
            <summary>
            Constructor for a 3D int box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="zmin"/>, <paramref name="xmax"/>, <paramref name="ymax"/> and 
            <paramref name="zmax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
            <seealso cref="M:OIV.Inventor.SbBox3i32.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.#ctor(OIV.Inventor.SbVec3i32,OIV.Inventor.SbVec3i32)">
            <summary>
            Constructor for a 3D int box. 
            <paramref name="min"/> and <paramref name="max"/> are the corners 
            of the diagonal that define the box.
            </summary>
            <param name="min">Lower corner.</param>
            <param name="max">Upper corner.</param>
            <seealso cref="M:OIV.Inventor.SbBox3i32.SetBounds(OIV.Inventor.SbVec3i32,OIV.Inventor.SbVec3i32)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3i32.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3i32.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3i32.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetCenter">
            <summary>
            Returns the center of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.ExtendBy(OIV.Inventor.SbVec3i32@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.ExtendBy(OIV.Inventor.SbVec3i32)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.ExtendBy(OIV.Inventor.SbBox3i32@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.ExtendBy(OIV.Inventor.SbBox3i32)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Intersect(OIV.Inventor.SbVec3i32@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Intersect(OIV.Inventor.SbVec3i32)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3i32.Intersect(OIV.Inventor.SbVec3i32@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Intersect(OIV.Inventor.SbBox3i32@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Intersect(OIV.Inventor.SbBox3i32)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3i32.Intersect(OIV.Inventor.SbBox3i32@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Intersection(OIV.Inventor.SbBox3i32)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Contains(OIV.Inventor.SbBox3i32)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Outside(OIV.Inventor.SbMatrix@,System.Int32@)">
            <overloads>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </overloads>
            <summary>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </summary>
            <remarks>
            <para>
            <paramref name="cullBits"/> keeps track of which view-volume clipping planes 
            the box is completely inside of; if a 'parent' bounding box of this 
            bounding box was found to be completely inside the left/right clipping 
            planes, the low bit of cullBits will be set to zero, and this routine 
            will not test this box against those planes. 
            </para>
            <para>
            When cullBits is zero, it is a waste of time to call this function!  
            Before calling this the first time, set cullBits to 7 
            (<see cref="T:OIV.Inventor.Actions.SoGLRenderAction"/> and 
            <see cref="T:OIV.Inventor.Nodes.SoSeparator"/> will handle this automatically 
            for render culling).
            </para>
            </remarks>
            <param name="MVP">Model + view + projection matrix.</param>
            <param name="cullBits">Keeps track of which view-volume clipping planes 
            the box is completely inside of. Set <paramref name="cullBits"/> to 7 when calling
            this method for the first time.</param>
            <returns><b>true</b> if this box is completely outside, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Outside(OIV.Inventor.SbMatrix,System.Int32@)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3i32.Outside(OIV.Inventor.SbMatrix@,System.Int32@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.SetBounds(OIV.Inventor.SbVec3i32@,OIV.Inventor.SbVec3i32@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.SetBounds(OIV.Inventor.SbVec3i32,OIV.Inventor.SbVec3i32)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetBounds(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetBounds(OIV.Inventor.SbVec3i32@,OIV.Inventor.SbVec3i32@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetClosestPoint(OIV.Inventor.SbVec3f)">
            <summary>
            Returns the closest point on the box to the given <paramref name="point"/>. 
            Returns the point on the center of the Z face if passed the center.
            </summary>
            <param name="point">Point coordinates.</param>
            <returns>Closest point on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetOrigin(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
            <param name="originZ">Z coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetSize(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
            <param name="sizeZ">Size along z axis</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox3i32.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.HasVolume">
            <summary>
            Tests if the box defines a volume (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if all three dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetSpan(OIV.Inventor.SbVec3f,System.Single@,System.Single@)">
            <summary>
            Finds the span of a box along a specified <paramref name="direction"/>. 
            </summary>
            <remarks>
            The span is the total 
            distance the box occupies along a given direction. The total distance is 
            returned in the form of a minimum and maximum distance from the origin of each 
            of the corners of the box along the given direction. The difference between 
            these two values is the span.
            </remarks>
            <param name="direction">Span direction.</param>
            <param name="dMin">Minimum distance.</param>
            <param name="dMax">Maximum distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Transform(OIV.Inventor.SbMatrix@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Transform(OIV.Inventor.SbMatrix)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetVolume">
            <summary>
            Computes the volume of the box.
            </summary>
            <returns>Volume of the box, 0 if box is <see cref="P:OIV.Inventor.SbBox3i32.Empty"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox3i32"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox3i32"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.op_Equality(OIV.Inventor.SbBox3i32,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3i32.op_Inequality(OIV.Inventor.SbBox3i32,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox3i32.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3i32.Max">
            <summary>
            Gets the maximum point of the box. 
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3i32.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox3i32.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox3f">
            <summary>
            3D box which has planes parallel to the major 
            axes and is specified by two points on a diagonal. </summary>
            <remarks>
            This class is part of the standard Open Inventor 
            datatype classes and is used as input and output 
            to geometry operations (<see cref="T:OIV.Inventor.Actions.SoGetBoundingBoxAction"/>). 
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox3f.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec2d value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Constructor for a 3D float box.
            </overloads>
            <summary>
            Constructor for a 3D float box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="zmin"/>, <paramref name="xmax"/>, <paramref name="ymax"/> and 
            <paramref name="zmax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
            <seealso cref="M:OIV.Inventor.SbBox3f.SetBounds(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.#ctor(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Constructor for a 3D float box. 
            <paramref name="min"/> and <paramref name="max"/> are the corners of the 
            diagonal that define the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
            <seealso cref="M:OIV.Inventor.SbBox3f.SetBounds(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3f.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3f.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3f.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetCenter">
            <summary>
            Gets the center of the box.
            </summary>
            <returns>Center of the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.ExtendBy(OIV.Inventor.SbVec3f@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.ExtendBy(OIV.Inventor.SbVec3f)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.ExtendBy(OIV.Inventor.SbBox3f@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.ExtendBy(OIV.Inventor.SbBox3f)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Intersect(OIV.Inventor.SbVec3f@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            <summary>
            Returns true if the specified <paramref name="point"/> intersects this box.
            </summary>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Intersect(OIV.Inventor.SbVec3f)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3f.Intersect(OIV.Inventor.SbVec3f@)"/> for more details.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Intersect(OIV.Inventor.SbBox3f@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Intersect(OIV.Inventor.SbBox3f)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3f.Intersect(OIV.Inventor.SbBox3f@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Intersection(OIV.Inventor.SbBox3f)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Contains(OIV.Inventor.SbBox3f)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Outside(OIV.Inventor.SbMatrix@,System.Int32@)">
            <overloads>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </overloads>
            <summary>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </summary>
            <remarks>
            <para>
            <paramref name="cullBits"/> keeps track of which view-volume clipping planes 
            the box is completely inside of; if a 'parent' bounding box of this 
            bounding box was found to be completely inside the left/right clipping 
            planes, the low bit of cullBits will be set to zero, and this routine 
            will not test this box against those planes. 
            </para>
            <para>
            When cullBits is zero, it is a waste of time to call this function!  
            Before calling this the first time, set cullBits to 7 
            (<see cref="T:OIV.Inventor.Actions.SoGLRenderAction"/> and 
            <see cref="T:OIV.Inventor.Nodes.SoSeparator"/> will handle this automatically 
            for render culling).
            </para>
            </remarks>
            <param name="MVP">Model + view + projection matrix.</param>
            <param name="cullBits">Keeps track of which view-volume clipping planes 
            the box is completely inside of. Set <paramref name="cullBits"/> to 7 when calling
            this method for the first time.</param>
            <returns><b>true</b> if this box is completely outside, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Outside(OIV.Inventor.SbMatrix,System.Int32@)">
            <summary>
            Convenient method. 
            <see cref="M:OIV.Inventor.SbBox3f.Outside(OIV.Inventor.SbMatrix@,System.Int32@)"/> for more details.
            </summary>
            <param name="MVP"></param>
            <param name="cullBits"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.SetBounds(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.SetBounds(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.SetBounds(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetBounds(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetBounds(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetClosestPoint(OIV.Inventor.SbVec3f)">
            <summary>
            Returns the closest point on the box to the given <paramref name="point"/>. 
            Returns the point on the center of the Z face if passed the center.
            </summary>
            <param name="point">Point coordinates.</param>
            <returns>Closest point on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetOrigin(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
            <param name="originZ">Z coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetSize(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
            <param name="sizeZ">Size along z axis</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox3f.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.IsEmpty">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3f.Empty">Empty property</see> instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.HasVolume">
            <summary>
            Tests if the box defines a volume (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if all three dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetSpan(OIV.Inventor.SbVec3f,System.Single@,System.Single@)">
            <summary>
            Finds the span of a box along a specified <paramref name="direction"/>. 
            </summary>
            <remarks>
            The span is the total 
            distance the box occupies along a given direction. The total distance is 
            returned in the form of a minimum and maximum distance from the origin of each 
            of the corners of the box along the given direction. The difference between 
            these two values is the span.
            </remarks>
            <param name="direction">Span direction.</param>
            <param name="dMin">Minimum distance.</param>
            <param name="dMax">Maximum distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Transform(OIV.Inventor.SbMatrix@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Transform(OIV.Inventor.SbMatrix)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetVolume">
            <summary>
            Computes the volume of the box.
            </summary>
            <returns>Volume of the box, 0 if box is <see cref="P:OIV.Inventor.SbBox3f.Empty"/></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox3f"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox3f"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.op_Equality(OIV.Inventor.SbBox3f,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3f.op_Inequality(OIV.Inventor.SbBox3f,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox3f.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3f.Max">
            <summary>
            Gets the maximum point of the box. 
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3f.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox3f.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox3d">
            <summary>
            3D box which has planes parallel to the major axes 
            and is specified by two points on a diagonal. </summary>
            <remarks>
            This class is part of the standard Open Inventor 
            datatype classes and is used as input and output 
            to geometry operations (<see cref="T:OIV.Inventor.Actions.SoGetBoundingBoxAction"/>). 
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox3d.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Constructor for a 3D double box.
            </overloads>
            <summary>
            Constructor for a 3D double box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="zmin"/>, <paramref name="xmax"/>, <paramref name="ymax"/> and 
            <paramref name="zmax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
            <seealso cref="M:OIV.Inventor.SbBox3d.SetBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.#ctor(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Constructor for a 3D double box. <paramref name="min"/> 
            and <paramref name="max"/> are the corners of the diagonal 
            that define the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3d.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3d.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox3d.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetCenter">
            <summary>
            Gets the center of the box.
            </summary>
            <returns>Center of the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.ExtendBy(OIV.Inventor.SbVec3d@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.ExtendBy(OIV.Inventor.SbVec3d)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.ExtendBy(OIV.Inventor.SbBox3d@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.ExtendBy(OIV.Inventor.SbBox3d)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Intersect(OIV.Inventor.SbVec3d@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Intersect(OIV.Inventor.SbVec3d)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Intersect(OIV.Inventor.SbBox3d@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Intersect(OIV.Inventor.SbBox3d)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Intersection(OIV.Inventor.SbBox3d)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Contains(OIV.Inventor.SbBox3d)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Outside(OIV.Inventor.SbMatrixd@,System.Int32@)">
            <overloads>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </overloads>
            <summary>
            Tests if bounding box is completely outside the view-volume defined by the 
            model+view+projection matrix given. 
            </summary>
            <remarks>
            <para>
            <paramref name="cullBits"/> keeps track of which view-volume clipping planes 
            the box is completely inside of; if a 'parent' bounding box of this 
            bounding box was found to be completely inside the left/right clipping 
            planes, the low bit of cullBits will be set to zero, and this routine 
            will not test this box against those planes. 
            </para>
            <para>
            When cullBits is zero, it is a waste of time to call this function!  
            Before calling this the first time, set cullBits to 7 
            (<see cref="T:OIV.Inventor.Actions.SoGLRenderAction"/> and 
            <see cref="T:OIV.Inventor.Nodes.SoSeparator"/> will handle this automatically 
            for render culling).
            </para>
            </remarks>
            <param name="MVP">Model + view + projection matrix.</param>
            <param name="cullBits">Keeps track of which view-volume clipping planes 
            the box is completely inside of. Set <paramref name="cullBits"/> to 7 when calling
            this method for the first time.</param>
            <returns><b>true</b> if this box is completely outside, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Outside(OIV.Inventor.SbMatrixd,System.Int32@)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbBox3d.Outside(OIV.Inventor.SbMatrixd@,System.Int32@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.SetBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.SetBounds(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.SetBounds(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetBounds(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetClosestPoint(OIV.Inventor.SbVec3d)">
            <summary>
            Returns the closest point on the box to the given <paramref name="point"/>. 
            Returns the point on the center of the Z face if passed the center.
            </summary>
            <param name="point">Point coordinates.</param>
            <returns>Closest point on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetOrigin(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
            <param name="originZ">Z coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetSize(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
            <param name="sizeZ">Size along z axis</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox3d.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.HasVolume">
            <summary>
            Tests if the box defines a volume (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if all three dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetSpan(OIV.Inventor.SbVec3d,System.Double@,System.Double@)">
            <summary>
            Finds the span of a box along a specified <paramref name="direction"/>. 
            </summary>
            <remarks>
            The span is the total 
            distance the box occupies along a given direction. The total distance is 
            returned in the form of a minimum and maximum distance from the origin of each 
            of the corners of the box along the given direction. The difference between 
            these two values is the span.
            </remarks>
            <param name="direction">Span direction.</param>
            <param name="dMin">Minimum distance.</param>
            <param name="dMax">Maximum distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Transform(OIV.Inventor.SbMatrixd@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Transform(OIV.Inventor.SbMatrixd)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetVolume">
            <summary>
            Computes the volume of the box.
            </summary>
            <returns>Volume of the box, 0 if box is <see cref="P:OIV.Inventor.SbBox3d.Empty"/></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox3d"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox3d"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.op_Equality(OIV.Inventor.SbBox3d,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox3d.op_Inequality(OIV.Inventor.SbBox3d,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox3d.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3d.Max">
            <summary>
            Gets the maximum point of the box. 
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y, and Z values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox3d.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox3d.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox2s">
            <summary>
            2D box which has planes parallel to the major axes 
            and is specified by two points (specified with short integers) 
            on a diagonal. </summary>
            <remarks>
            This class is part of the standard Open Inventor 
            datatype classes and is used as input and output to geometry 
            operations.
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox2s.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <overloads>
            Constructor for a 2D short box.
            </overloads>
            <summary>
            Constructor for a 2D short box. <paramref name="xmin"/>, <paramref name="ymin"/>, 
            <paramref name="xmax"/>, and <paramref name="ymax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <seealso cref="M:OIV.Inventor.SbBox2s.SetBounds(System.Int16,System.Int16,System.Int16,System.Int16)"/>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.#ctor(OIV.Inventor.SbVec2s,OIV.Inventor.SbVec2s)">
            <summary>
            Constructor for a 2D short box. <paramref name="min"/> and 
            <paramref name="max"/> are the corners of the diagonal that defines the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2s.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2s.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2s.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.ExtendBy(OIV.Inventor.SbVec2s@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.ExtendBy(OIV.Inventor.SbVec2s)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.ExtendBy(OIV.Inventor.SbBox2s@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.ExtendBy(OIV.Inventor.SbBox2s)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Intersect(OIV.Inventor.SbVec2s@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Intersect(OIV.Inventor.SbVec2s)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Intersect(OIV.Inventor.SbBox2s@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Intersect(OIV.Inventor.SbBox2s)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Intersection(OIV.Inventor.SbBox2s)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Contains(OIV.Inventor.SbBox2s)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.SetBounds(System.Int16,System.Int16,System.Int16,System.Int16)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.SetBounds(OIV.Inventor.SbVec2s@,OIV.Inventor.SbVec2s@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.SetBounds(OIV.Inventor.SbVec2s,OIV.Inventor.SbVec2s)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetBounds(System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <overloads>Gets the corners of the box.</overloads>
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetBounds(OIV.Inventor.SbVec2s@,OIV.Inventor.SbVec2s@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetOrigin(System.Int16@,System.Int16@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetSize(System.Int16@,System.Int16@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetAspectRatio">
            <summary>
            Computes the aspect ratio (ratio of width to height) of box.
            </summary>
            <returns>Aspect ratio of box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox2s.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.HasArea">
            <summary>
            Tests if the box defines a surface (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if both dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox2s"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.op_Equality(OIV.Inventor.SbBox2s,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.op_Inequality(OIV.Inventor.SbBox2s,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2s.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox2s"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox2s.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2s.Max">
            <summary>
            Gets the maximum point of the box.
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2s.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox2s.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox2i32">
            <summary>
            2D box which has planes parallel to the major 
            axes and is specified by two points (specified with 32 
            bits integers) on a diagonal. </summary>
            <remarks>
            This class is part of 
            the standard Open Inventor datatype classes and is 
            used as input and output to geometry operations.
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox2i32.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            Constructor for a 2D integer box.
            </overloads>
            <summary>
            Constructor for a 2D integer box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="xmax"/> and <paramref name="ymax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.#ctor(OIV.Inventor.SbVec2i32,OIV.Inventor.SbVec2i32)">
            <summary>
            Constructor for a 2D integer box. <paramref name="min"/> and 
            <paramref name="max"/> are the corners of the diagonal that defines the box.
            </summary>
            <param name="min">Minimum corner of the box.</param>
            <param name="max">Maximum corner of the box.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2i32.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2i32.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2i32.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.ExtendBy(OIV.Inventor.SbVec2i32@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.ExtendBy(OIV.Inventor.SbVec2i32)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.ExtendBy(OIV.Inventor.SbBox2i32@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.ExtendBy(OIV.Inventor.SbBox2i32)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Intersect(OIV.Inventor.SbVec2i32@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Intersect(OIV.Inventor.SbVec2i32)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Intersect(OIV.Inventor.SbBox2i32@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Intersect(OIV.Inventor.SbBox2i32)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Intersection(OIV.Inventor.SbBox2i32)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Contains(OIV.Inventor.SbBox2i32)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.SetBounds(OIV.Inventor.SbVec2i32@,OIV.Inventor.SbVec2i32@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.SetBounds(OIV.Inventor.SbVec2i32,OIV.Inventor.SbVec2i32)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetBounds(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetBounds(OIV.Inventor.SbVec2i32@,OIV.Inventor.SbVec2i32@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetOrigin(System.Int32@,System.Int32@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetSize(System.Int32@,System.Int32@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetAspectRatio">
            <summary>
            Computes the aspect ratio (ratio of width to height) of box.
            </summary>
            <returns>Aspect ratio of box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox2i32.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.HasArea">
            <summary>
            Tests if the box defines a surface (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if both dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox2i32"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.op_Equality(OIV.Inventor.SbBox2i32,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.op_Inequality(OIV.Inventor.SbBox2i32,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2i32.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox2i32"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox2i32.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2i32.Max">
            <summary>
            Gets the maximum point of the box.
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2i32.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox2i32.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox2f">
            <summary>
            2D box which has planes parallel to the major axes and 
            is specified by two points (specified as floating point) on 
            a diagonal. 
            </summary>
            <remarks>
            This class is part of the standard Open Inventor 
            datatype classes and is used as input and output to 
            geometry operations.
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox2f.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Constructor for a 2D float box.
            </overloads>
            <summary>
            Constructor for a 2D float box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="xmax"/> and <paramref name="ymax"/> are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.#ctor(OIV.Inventor.SbVec2f,OIV.Inventor.SbVec2f)">
            <summary>
            Constructor for a 2D float box. <paramref name="min"/> and 
            <paramref name="max"/> are the corners of the diagonal that defines the box.
            </summary>
            <param name="min">Minimum corner of the box.</param>
            <param name="max">Maximum corner of the box.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2f.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2f.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2f.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.ExtendBy(OIV.Inventor.SbVec2f@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.ExtendBy(OIV.Inventor.SbVec2f)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.ExtendBy(OIV.Inventor.SbBox2f@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.ExtendBy(OIV.Inventor.SbBox2f)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="bb">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Intersect(OIV.Inventor.SbVec2f@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Intersect(OIV.Inventor.SbVec2f)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Intersect(OIV.Inventor.SbBox2f@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Intersect(OIV.Inventor.SbBox2f)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Intersection(OIV.Inventor.SbBox2f)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Contains(OIV.Inventor.SbBox2f)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.SetBounds(OIV.Inventor.SbVec2f@,OIV.Inventor.SbVec2f@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.SetBounds(OIV.Inventor.SbVec2f,OIV.Inventor.SbVec2f)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetBounds(System.Single@,System.Single@,System.Single@,System.Single@)">
            <overloads>Gets the corners of the box.</overloads>
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetBounds(OIV.Inventor.SbVec2f@,OIV.Inventor.SbVec2f@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetOrigin(System.Single@,System.Single@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetSize(System.Single@,System.Single@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetSize(OIV.Inventor.SbVec2f@)">
            <summary>
            Gets box size.
            </summary>
            <param name="size">Box size.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetAspectRatio">
            <summary>
            Computes the aspect ratio (ratio of width to height) of box.
            </summary>
            <returns>Aspect ratio of box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox2f.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.HasArea">
            <summary>
            Tests if the box defines a surface (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if both dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox2f"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.op_Equality(OIV.Inventor.SbBox2f,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.op_Inequality(OIV.Inventor.SbBox2f,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2f.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox2f"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox2f.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2f.Max">
            <summary>
            Gets the maximum point of the box.
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2f.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox2f.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbBox2d">
            <summary>
            2D box which has planes parallel to the major axes and 
            is specified by two points (specified in double precision) 
            on a diagonal. 
            </summary>
            <remarks>
            This class is part of the standard Open Inventor 
            datatype classes and is used as input and output to geometry 
            operations.
            </remarks>
        </member>
        <member name="F:OIV.Inventor.SbBox2d.EmptyBox">
            <summary>
            Represents an empty <see cref="T:OIV.Inventor.SbBox3s"/>.
            This field is constant.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Constructor for a 2D double box.
            </overloads>
            <summary>
            Constructor for a 2D double box. <paramref name="xmin"/>, <paramref name="ymin"/>,
            <paramref name="xmax"/> and <paramref name="ymax"/> 
            are the bounds of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.#ctor(OIV.Inventor.SbVec2d,OIV.Inventor.SbVec2d)">
            <summary>
            Constructor for a 2D double box. <paramref name="min"/> and 
            <paramref name="max"/> are the corners of the diagonal that defines the box.
            </summary>
            <param name="min">Minimum corner of the box.</param>
            <param name="max">Maximum corner of the box.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetMin">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2d.Min">Min property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetMax">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2d.Max">Max property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetSize">
            <summary>
            Use <see cref="P:OIV.Inventor.SbBox2d.Size">Size property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.ExtendBy(OIV.Inventor.SbVec2d@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.ExtendBy(OIV.Inventor.SbVec2d)">
            <summary>
            Extends this box (if necessary) to contain the specified point.
            </summary>
            <param name="pt">Point that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.ExtendBy(OIV.Inventor.SbBox2d@)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="r">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.ExtendBy(OIV.Inventor.SbBox2d)">
            <summary>
            Extends this box (if necessary) to contain the specified box.
            </summary>
            <param name="r">Box that the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Intersect(OIV.Inventor.SbVec2d@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Intersect(OIV.Inventor.SbVec2d)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Intersect(OIV.Inventor.SbBox2d@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Intersect(OIV.Inventor.SbBox2d)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Intersection(OIV.Inventor.SbBox2d)">
            <summary>
            Gets the intersection of the specified box with this box.
            </summary>
            <returns>
            The intersection box. 
            The returned box is empty if there is no intersection.
            </returns>
            <param name="box">The box to intersect.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Contains(OIV.Inventor.SbBox2d)">
            <summary>
            Tests if the specified box is fully contained
            inside this box.
            </summary>
            <returns>
            <see langword="true"/> is the specified box is fully contained,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.SetBounds(OIV.Inventor.SbVec2d@,OIV.Inventor.SbVec2d@)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.SetBounds(OIV.Inventor.SbVec2d,OIV.Inventor.SbVec2d)">
            <summary>
            Sets the corners of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetBounds(OIV.Inventor.SbVec2d@,OIV.Inventor.SbVec2d@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetOrigin(System.Double@,System.Double@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetSize(System.Double@,System.Double@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetAspectRatio">
            <summary>
            Computes the aspect ratio (ratio of width to height) of box.
            </summary>
            <returns>Aspect ratio of box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbBox2d.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.IsEmpty">
            <summary>
            Use Empty property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.HasArea">
            <summary>
            Tests if the box defines a surface (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if both dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbBox2d"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.op_Equality(OIV.Inventor.SbBox2d,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.op_Inequality(OIV.Inventor.SbBox2d,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbBox2d.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbBox2d"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="P:OIV.Inventor.SbBox2d.Min">
            <summary>
            Gets the minimum point of the box. 
            </summary>
            <remarks>
            The minimum point is the 
            corner of the box with the lowest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2d.Max">
            <summary>
            Gets the maximum point of the box.
            </summary>
            <remarks>
            The maximum point is the 
            corner of the box with the highest X, Y values.
            </remarks>
        </member>
        <member name="P:OIV.Inventor.SbBox2d.Size">
            <summary>
            Gets box size.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbBox2d.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbXfBox3f">
            <summary>
            3D box with an associated transformation matrix. </summary>
            <remarks>
            This class is useful when a box will be transformed frequently; 
            if an <see cref="T:OIV.Inventor.SbBox3f"/>is used for this purpose it will expand 
            each time it is transformed in order to keep itself axis-aligned. 
            Transformations can be accumulated on an SbXfBox3f without expanding the box, 
            and after all transformations have been done, the box can be expanded 
            to an axis-aligned box if necessary. 
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.CheckInit">
            <summary>
            As structure cannot define / override default constructor
            we must check that private fields are initialized has C++
            done it in default constructor.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.#ctor(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <overloads>
            Constructor for a 3D transformed float box.
            </overloads>
            <summary>
            Constructor given box corners.
            </summary>
            <param name="min">Minimum corner of the box.</param>
            <param name="max">Maximum corner of the box.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.#ctor(OIV.Inventor.SbBox3f)">
            <summary>
            Constructor given a <see cref="T:OIV.Inventor.SbBox3f"/> box.
            </summary>
            <param name="box">Contained box.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.SetTransform(OIV.Inventor.SbMatrix@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.SetTransform(OIV.Inventor.SbMatrix)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetTransform">
            <summary>
            Gets the transformation on the box.
            </summary>
            <returns>Transformation on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetInverse">
            <summary>
            Gets the inverse of the transformation on the box.
            </summary>
            <returns>Inverse of the transformation on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetCenter">
            <summary>
            Gets the center of the box.
            </summary>
            <returns>Center of the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbVec3f@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            
            <summary>
            Extends the box (if necessary) to contain the given 3D point <paramref name="pt"/>. 
            </summary>
            <remarks>
            If the box has had 
            a non-identity transformation applied using the <see cref="O:SetTransform"/> method, 
            the point is assumed to be in the transformed space. For example, the following 
            code sequence:
            <para>
            <code>
            SbXfBox3f bbox;
            bbox.ExtendBy(new SbVec3f(0,0,0));
            SbMatrix trans;
            trans.SetTranslate(new SbVec3f(1,1,1));
            bbox.SetTransform(trans);
            bbox.ExtendBy(new SbVec3f(0,0,0));
            </code>
            will result in a bounding box extending from (-1,-1,-1) to (0,0,0) in 
            bbox'es local (untransformed) space.
            </para>
            </remarks>
            <param name="pt">Point the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbVec3f)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbVec3f@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbBox3f@)">
            <summary>
            Extends the box (if necessary) to contain the given box <paramref name="bb"/>. </summary>
            <remarks>
            If the box has had a non-identity transformation applied using the 
            <see cref="O:SetTransform"/> method, the given <see cref="T:OIV.Inventor.SbBox3f"/> is 
            assumed to be in the transformed space.
            </remarks>
            <param name="bb">Box to be contained.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbBox3f)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbBox3f@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbXfBox3f@)">
            <summary>
            Extends the box (if necessary) to contain the given box <paramref name="bb"/>.
            </summary>
            <param name="bb">Box to be contained.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ExtendBy(OIV.Inventor.SbXfBox3f)">
            <summary>
            Extends the box (if necessary) to contain the given box <paramref name="bb"/>.
            </summary>
            <param name="bb">Box to be contained.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Intersect(OIV.Inventor.SbVec3f@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Intersect(OIV.Inventor.SbVec3f)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Intersect(OIV.Inventor.SbBox3f@)">
            <overloads>
            Tests if a box intersects this box.
            </overloads>
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Intersect(OIV.Inventor.SbBox3f)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbXfBox3f.Intersect(OIV.Inventor.SbBox3f@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.SetBounds(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the bounds of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.SetBounds(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Sets the bounds of the box.
            </overloads>
            <summary>
            Sets the bounds of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.SetBounds(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Sets the bounds of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetBounds(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetBounds(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetOrigin(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
            <param name="originZ">Z coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetSize(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
            <param name="sizeZ">Size along z axis</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetVolume">
            <summary>
            Computes the volume of the box.
            </summary>
            <returns>Volume of the box, 0 if box is <see cref="P:OIV.Inventor.SbXfBox3f.Empty"/></returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbXfBox3f.Empty">Empty property</seealso>.
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.IsEmpty">
            <summary>
            Use <see cref="P:OIV.Inventor.SbXfBox3f.Empty">Empty property</see> instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.HasVolume">
            <summary>
            Tests if the box defines a volume (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if all three dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetSpan(OIV.Inventor.SbVec3f,System.Single@,System.Single@)">
            <summary>
            Finds the span of a box along a specified <paramref name="direction"/>. 
            </summary>
            <remarks>
            The span is the total 
            distance the box occupies along a given direction. The total distance is 
            returned in the form of a minimum and maximum distance from the origin of each 
            of the corners of the box along the given direction. The difference between 
            these two values is the span.
            </remarks>
            <param name="direction">Span direction.</param>
            <param name="dMin">Minimum distance.</param>
            <param name="dMax">Maximum distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Transform(OIV.Inventor.SbMatrix@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Transform(OIV.Inventor.SbMatrix)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Project">
            <summary>
            Projects an SbXfBox3d to an SbBox3d.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbXfBox3f"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbXfBox3f"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.op_Equality(OIV.Inventor.SbXfBox3f,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.op_Inequality(OIV.Inventor.SbXfBox3f,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3f.op_Implicit(OIV.Inventor.SbXfBox3f)~OIV.Inventor.SbBox3f">
            <summary>
            Implicit cast operator from <see cref="T:OIV.Inventor.SbXfBox3f"/> to <see cref="T:OIV.Inventor.SbBox3f"/>.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbXfBox3f.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbXfBox3d">
            <summary>
            3D box with an associated transformation matrix. </summary>
            <remarks>
            A 3D box with an arbitrary transformation applied. This class is useful 
            when a box will be transformed frequently; if an SbBox3f is used for 
            this purpose it will expand each time it is transformed in order 
            to keep itself axis-aligned. Transformations can be accumulated 
            on an <see cref="T:OIV.Inventor.SbXfBox3d"/> without expanding the box, and 
            after all transformations have been done, the box can be 
            expanded to an axis-aligned box if necessary
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.CheckInit">
            <summary>
            As structure cannot define / override default constructor
            we must check that private fields are initialized has C++
            done it in default constructor.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.#ctor(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <overloads>
            Constructor for a 3D transformed double box.
            </overloads>
            <summary>
            Constructor given corners.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.#ctor(OIV.Inventor.SbBox3d)">
            <summary>
            Constructor given an <see cref="T:OIV.Inventor.SbBox3d"/>.
            </summary>
            <param name="box">Original box.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.SetTransform(OIV.Inventor.SbMatrixd@)">
            <overloads>
            Transforms box by matrix.
            </overloads>
            
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.SetTransform(OIV.Inventor.SbMatrixd)">
            <summary>
            Transforms box by matrix, enlarging box to contain result.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetTransform">
            <summary>
            Gets the transformation on the box.
            </summary>
            <returns>Transformation on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetInverse">
            <summary>
            Gets the inverse of the transformation on the box.
            </summary>
            <returns>Inverse of the transformation on the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetCenter">
            <summary>
            Gets the center of the box.
            </summary>
            <returns>Center of the box.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbVec3d@)">
            <overloads>
            Extends this box (if necessary) to contain the specified point or box.
            </overloads>
            
            <summary>
            Extends the box (if necessary) to contain the given 3D point <paramref name="pt"/>. 
            </summary>
            <remarks>
            If the box has had 
            a non-identity transformation applied using the <see cref="O:SetTransform"/> method, 
            the point is assumed to be in the transformed space. For example, the following 
            code sequence:
            <para>
            <code>
            SbXfBox3d bbox;
            bbox.ExtendBy(new SbVec3d(0,0,0));
            SbMatrixd trans;
            trans.SetTranslate(new SbVec3d(1,1,1));
            bbox.SetTransform(trans);
            bbox.ExtendBy(new SbVec3d(0,0,0));
            </code>
            will result in a bounding box extending from (-1,-1,-1) to (0,0,0) in 
            bbox'es local (untransformed) space.
            </para>
            </remarks>
            <param name="pt">Point the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbVec3d)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbVec3d@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbBox3d@)">
            <summary>
            Extends the box (if necessary) to contain the given box. 
            </summary>
            <remarks>
            If the box has had a non-identity transformation applied using 
            the <see cref="O:SetTransform"/> method, the given SbBox3d is 
            assumed to be in the transformed space.
            </remarks>
            <param name="bb">Box the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbBox3d)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbBox3d@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbXfBox3d@)">
            <summary>
            Extends the box (if necessary) to contain the given box.
            </summary>
            <param name="bb">Box the box must contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbXfBox3d)">
            <summary>
            Convenient method. <see cref="M:OIV.Inventor.SbXfBox3d.ExtendBy(OIV.Inventor.SbXfBox3d@)"/> for more details.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Intersect(OIV.Inventor.SbVec3d@)">
            <overloads>
            Methods to test intersection of box with point or box.
            </overloads>
            
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Intersect(OIV.Inventor.SbVec3d)">
            <summary>
            Tests if the <paramref name="pt"/> point intersects this box.
            </summary>
            <param name="pt">Point to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Intersect(OIV.Inventor.SbBox3d@)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Intersect(OIV.Inventor.SbBox3d)">
            <summary>
            Tests if the <paramref name="bb"/> box intersects this box.
            </summary>
            <param name="bb">Box to test the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.SetBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Sets the corners of the box.
            </overloads>
            
            <summary>
            Sets the bounds of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.SetBounds(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Sets the bounds of the box.
            </overloads>
            
            <summary>
            Sets the bounds of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.SetBounds(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Sets the bounds of the box.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetBounds(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <overloads>
            Gets the corners of the box.
            </overloads>
            
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="xmin">Lower x.</param>
            <param name="ymin">Lower y.</param>
            <param name="zmin">Lower z.</param>
            <param name="xmax">Upper x.</param>
            <param name="ymax">Upper y.</param>
            <param name="zmax">Upper z.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetBounds(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <summary>
            Gets the corners of the box.
            </summary>
            <param name="min">Minimum corner.</param>
            <param name="max">Maximum corner.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetOrigin(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets box origin which is the same as the minimum corner of the box.
            </summary>
            <param name="originX">X coordinate of box origin.</param>
            <param name="originY">Y coordinate of box origin.</param>
            <param name="originZ">Z coordinate of box origin.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetSize(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets box size.
            </summary>
            <param name="sizeX">Size along x axis.</param>
            <param name="sizeY">Size along y axis.</param>
            <param name="sizeZ">Size along z axis.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetVolume">
            <summary>
            Computes the volume of the box.
            </summary>
            <returns>Volume of the box, 0 if box is <see cref="P:OIV.Inventor.SbXfBox3d.Empty"/></returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.MakeEmpty">
            <summary>
            Makes this box empty.
            </summary>
            <seealso cref="P:OIV.Inventor.SbXfBox3d.Empty">Empty property</seealso>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.IsEmpty">
            <summary>
            Use <see cref="P:OIV.Inventor.SbXfBox3d.Empty"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.HasVolume">
            <summary>
            Tests if the box defines a volume (not degenerated).
            </summary>
            <returns>Returns <b>true</b> if all three dimensions of the box have 
            positive size, and <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetSpan(OIV.Inventor.SbVec3d,System.Double@,System.Double@)">
            <summary>
            Finds the span of a box along a specified <paramref name="direction"/>. 
            </summary>
            <remarks>
            The span is the total 
            distance the box occupies along a given direction. The total distance is 
            returned in the form of a minimum and maximum distance from the origin of each 
            of the corners of the box along the given direction. The difference between 
            these two values is the span.
            </remarks>
            <param name="direction">Span direction.</param>
            <param name="dMin">Minimum distance.</param>
            <param name="dMax">Maximum distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Transform(OIV.Inventor.SbMatrixd@)">
            <overloads>
            Transforms the box by the given matrix.
            </overloads>
            
            <summary>
            Transforms the box by the given matrix.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Transform(OIV.Inventor.SbMatrixd)">
            <summary>
            Transforms the box by the given matrix.
            </summary>
            <param name="m">Transformation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Project">
            <summary>
            Projects an SbXfBox3d to an SbBox3d.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbXfBox3d"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbXfBox3d"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the box bounds (min - max).</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.op_Equality(OIV.Inventor.SbXfBox3d,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.op_Inequality(OIV.Inventor.SbXfBox3d,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbXfBox3d.op_Implicit(OIV.Inventor.SbXfBox3d)~OIV.Inventor.SbBox3d">
            <summary>
            Implicit cast operator from <see cref="T:OIV.Inventor.SbXfBox3d"/> to <see cref="T:OIV.Inventor.SbBox3d"/>.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbXfBox3d.Empty">
            <summary>
            Gets a flag indicating if the box is empty (degenerate).
            </summary>
            <value><b>true</b> if the box is empty, <b>false</b> otherwise.</value>
        </member>
        <member name="T:OIV.Inventor.SbTime">
            <summary>
            Class for representation of a time.
            <para>
            This class represents and performs operations on time. Operations may be done in 
            seconds, seconds and microseconds, or using <see cref="T:System.DateTime"/>.
            </para>
            <seealso cref="T:OIV.Inventor.SbElapsedTime"/>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbTime.Zero">
            <summary>
            Zero time.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTime.#ctor(System.Double)">
            <summary>
            Constructor taking seconds.
            </summary>
            <param name="sec">Seconds since 00:00:00 on 1 Jan 1970 at Greenwich.</param>
            <seealso cref="M:OIV.Inventor.SbTime.SetValue(System.Double)"/>
        </member>
        <member name="M:OIV.Inventor.SbTime.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor taking seconds and microseconds. 
            </summary>
            <param name="sec">Seconds since 00:00:00 on 1 Jan 1970 at Greenwich.</param>
            <param name="usec">Microseconds value.</param>
        </member>
        <member name="M:OIV.Inventor.SbTime.#ctor(System.DateTime)">
            <summary>
            Constructor taking <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime"></param>
            <seealso cref="M:OIV.Inventor.SbTime.SetValue(System.DateTime)"/>
        </member>
        <member name="M:OIV.Inventor.SbTime.GetTimeOfDay">
            <summary>
            Get the current time (seconds since Jan 1, 1970).
            </summary>
            <returns>Seconds since Jan 1, 1970.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.SetToTimeOfDay">
            <summary>
            Set to the current time.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbTime.MaxTime">
            <summary>
            Get a time far, far into the future.
            </summary>
            <returns>Max time value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.SetValue(System.Double)">
            <summary>
            Set time from a double (in seconds).
            </summary>
            <param name="sec">Seconds since 00:00:00 on 1 Jan 1970 at Greenwich.</param>
        </member>
        <member name="M:OIV.Inventor.SbTime.SetValue(System.Int64,System.Int64)">
            <summary>
            Set time from seconds + microseconds.
            </summary>
            <param name="sec">Seconds since 00:00:00 on 1 Jan 1970 at Greenwich.</param>
            <param name="usec">Microseconds value.</param>
        </member>
        <member name="M:OIV.Inventor.SbTime.SetValue(System.DateTime)">
            <summary>
            Set time from a struct timeval.
            </summary>
            <param name="dateTime">Time value.</param>
        </member>
        <member name="M:OIV.Inventor.SbTime.SetMsecValue(System.UInt64)">
            <summary>
            Set time from milliseconds.
            </summary>
            <param name="msec">Milliseconds since 00:00:00 on 1 Jan 1970 at Greenwich.</param>
        </member>
        <member name="M:OIV.Inventor.SbTime.GetValue">
            <summary>
            Returns time in seconds as a double.
            </summary>
            <returns>Time in seconds as a double.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.GetValue(System.Int64@,System.Int64@)">
            <summary>
            Get time in seconds and microseconds.
            </summary>
            <param name="sec">Seconds output parameter.</param>
            <param name="usec">Microseconds output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbTime.GetValue(System.DateTime@)">
            <summary>
            Gets time in a <see cref="T:System.DateTime"/> structure.
            </summary>
            <remarks>The </remarks>
            <param name="dateTime"></param>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Explicit(OIV.Inventor.SbTime)~System.DateTime">
            <summary>
            Explicit cast operator to convert an SbTime to a System.DateTime
            </summary>
            <see cref="T:System.DateTime"/>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.GetMsecValue">
            <summary>
            Returns time in milliseconds.
            </summary>
            <returns>Time in milliseconds.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbTime"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Addition(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Additive (+) operator. Performs the addition between the times <paramref name="t1"/> 
            and <paramref name="t2"/>.
            </summary>
            <returns>Addition between the two <see cref="T:OIV.Inventor.SbTime"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Subtraction(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Subtraction (–) operator. Performs the difference between the times <paramref name="t0"/> 
            and <paramref name="t1"/>.
            </summary>
            <returns>Difference between the two <see cref="T:OIV.Inventor.SbTime"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_UnaryNegation(OIV.Inventor.SbTime)">
            <summary>
            The unary negation operator (-).
            </summary>
            <returns>The negative of <paramref name="t"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Multiply(OIV.Inventor.SbTime,System.Double)">
            <summary>
            The multiplication operator (*). Multiplication by scalar.
            </summary>
            <param name="s">Multiplicative factor.</param>
            <param name="t">Time to multiply.</param>
            <returns>Resulting time.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Multiply(System.Double,OIV.Inventor.SbTime)">
            <summary>
            The multiplication operator (*). Multiplication by scalar.
            </summary>
            <param name="s">Multiplicative factor.</param>
            <param name="t">Time to multiply.</param>
            <returns>Resulting time.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Division(OIV.Inventor.SbTime,System.Double)">
            <summary>
            The division operator (/). Division by scalar.
            </summary>
            <param name="s">Division factor.</param>
            <param name="t1">Time to divide.</param>
            <returns>Resulting time.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Division(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            The division operator (/). Division by another time.
            </summary>
            <param name="t1">Time to divide.</param>
            <param name="t2">Divisor time.</param>
            <returns>Resulting time in seconds.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Modulus(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Modulus for two times (remainder when <paramref name="t1"/> is divided by <paramref name="t2"/>).
            </summary>
            <param name="t1">Time to divide.</param>
            <param name="t2">Divisor time.</param>
            <returns>Remainder time.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Equality(OIV.Inventor.SbTime,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_Inequality(OIV.Inventor.SbTime,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_LessThan(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Relational (less than) operator.
            </summary>
            <param name="t1">Time to compare.</param>
            <param name="t2">Time to compare.</param>
            <returns><b>true</b> if <paramref name="t1"/> is less than <paramref name="t2"/>, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_GreaterThan(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Relational (greater than) operator.
            </summary>
            <param name="t1">Time to compare.</param>
            <param name="t2">Time to compare.</param>
            <returns><b>true</b> if <paramref name="t1"/> is greater than <paramref name="t2"/>, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_LessThanOrEqual(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Relational (less than or equal to) operator.
            </summary>
            <param name="t1">Time to compare.</param>
            <param name="t2">Time to compare.</param>
            <returns><b>true</b> if <paramref name="t1"/> is less than or equals <paramref name="t2"/>, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbTime.op_GreaterThanOrEqual(OIV.Inventor.SbTime,OIV.Inventor.SbTime)">
            <summary>
            Relational (greater than or equal to) operator.
            </summary>
            <param name="t1">Time to compare.</param>
            <param name="t2">Time to compare.</param>
            <returns><b>true</b> if <paramref name="t1"/> is greater than or equals <paramref name="t2"/>, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="T:OIV.Inventor.SbMatrix">
            <summary>
            4x4 matrix class/datatype used by many Open Inventor 
            node and action classes. The matrices are stored in 
            row-major order.
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbMatrix.Zero">
            <summary>
            Represents a matrix with all coefficients set to 0
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor given each matrix coefficients.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.#ctor(System.Single[])">
            <summary>
            Constructor.
            </summary>
            <param name="mat">Array containing 16 single components.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.#ctor(System.Single[0:,0:])">
            <summary>
            Constructor.
            </summary>
            <param name="mat">Array containing 16 single components.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetValue(System.Single[])">
            <summary>
            Sets value from an array of 16 single components.
            </summary>
            <param name="mat">Array containing 16 single components.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetValue(System.Single[0:,0:])">
            <summary>
            Sets value from an array of 16 single components.
            </summary>
            <param name="mat">Array containing 16 single components.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetValue(OIV.Inventor.SbMatrixd@)">
            <overloads>
            Sets value from a double precision matrix.
            </overloads>
            <summary>
            Sets value from a double precision matrix.
            </summary>
            <param name="md">Double precision matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetValue(OIV.Inventor.SbMatrixd)">
            <summary>
            Sets value from a double precision matrix.
            </summary>
            <param name="md">Double precision matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MakeIdentity">
            <summary>
            Sets matrix to be identity.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Identity">
            <summary>
            Returns an identity matrix.
            </summary>
            <returns>Indentity matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetRotate(OIV.Inventor.SbRotation@)">
            <overloads>
            Sets matrix to rotate by given rotation.
            </overloads>
            <summary>
            Sets matrix to rotate by given rotation.
            </summary>
            <param name="q">Rotation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetRotate(OIV.Inventor.SbRotation)">
            <summary>
            Sets matrix to rotate by given rotation.
            </summary>
            <param name="q">Rotation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetScale(System.Single)">
            <overloads>
            Sets matrix to scale.
            </overloads>
            <summary>
            Sets matrix to scale by given uniform factor.
            </summary>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetScale(OIV.Inventor.SbVec3f@)">
            <summary>
            Sets matrix to scale by given vector.
            </summary>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetScale(OIV.Inventor.SbVec3f)">
            <summary>
            Sets matrix to scale by given vector.
            </summary>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTranslate(OIV.Inventor.SbVec3f@)">
            <overloads>
            Sets matrix to translate.
            </overloads>
            <summary>
            Sets matrix to translate by given vector.
            </summary>
            <param name="t">Translation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTranslate(OIV.Inventor.SbVec3f)">
            <summary>
            Sets matrix to translate by given vector.
            </summary>
            <param name="t">Translation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTransform(OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Composes the matrix.
            </overloads>
            <summary>
            Composes the matrix based on a translation, rotation, scale, orientation for 
            scale, and center.     
            </summary>
            <remarks>
            The <paramref name="scaleOrientation"/> chooses the primary axes for the scale. 
            The <paramref name="center"/> is the center point for scaling and rotation.
            </remarks>
            <param name="translation">Translation value.</param>
            <param name="rotation">Rotation value.</param>
            <param name="scaleFactor">Scale value</param>
            <param name="scaleOrientation">Scale orientation value.</param>
            <param name="center">Center value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTransform(OIV.Inventor.SbVec3f,OIV.Inventor.SbRotation,OIV.Inventor.SbVec3f,OIV.Inventor.SbRotation,OIV.Inventor.SbVec3f)">
            <summary>
            Composes the matrix based on a translation, rotation, scale, orientation for 
            scale, and center.     
            </summary>
            <remarks>
            The <paramref name="scaleOrientation"/> chooses the primary axes for the scale. 
            The <paramref name="center"/> is the center point for scaling and rotation.
            </remarks>
            <param name="translation">Translation value.</param>
            <param name="rotation">Rotation value.</param>
            <param name="scaleFactor">Scale value</param>
            <param name="scaleOrientation">Scale orientation value.</param>
            <param name="center">Center value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTransform(OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@)">
            <summary>
            Composes the matrix based on a translation, rotation, and scale.  
            A scale orientation value of (0,0,0,1) is used. 
            The center point for scaling and rotation is (0,0,0).
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTransform(OIV.Inventor.SbVec3f,OIV.Inventor.SbRotation,OIV.Inventor.SbVec3f)">
            <summary>
            Composes the matrix based on a translation, rotation, and scale.  
            A scale orientation value of (0,0,0,1) is used. 
            The center point for scaling and rotation is (0,0,0).
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTransform(OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@)">
            <summary>
            Composes the matrix based on a translation, rotation, scale, and orientation 
            for scale. The <paramref name="so"/> chooses the primary axes for the scale. The 
            center point for scaling and rotation is (0,0,0). 
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale value.</param>
            <param name="so">Scale orientation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.SetTransform(OIV.Inventor.SbVec3f,OIV.Inventor.SbRotation,OIV.Inventor.SbVec3f,OIV.Inventor.SbRotation)">
            <summary>
            Composes the matrix based on a translation, rotation, scale, and orientation 
            for scale. The <paramref name="so"/> chooses the primary axes for the scale. The 
            center point for scaling and rotation is (0,0,0). 
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale value.</param>
            <param name="so">Scale orientation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.GetTransform(OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@)">
            <summary>
            Decomposes the matrix into a translation, rotation, scale, and scale 
            orientation. Any projection information is discarded. The decomposition depends 
            upon choice of center point for rotation and scaling, which is optional as the 
            last parameter. Note that if the center is 0, this method is the same as 
            <see cref="M:OIV.Inventor.SbMatrix.Factor(OIV.Inventor.SbMatrix@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbMatrix@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbMatrix@)"/> where t is <paramref name="translation"/>, u is <paramref name="rotation"/>, 
            s is <paramref name="scaleFactor"/> and r is <paramref name="scaleOrientation"/>.
            </summary>
            <param name="translation">Translation output parameter.</param>
            <param name="rotation">Rotation output parameter.</param>
            <param name="scaleFactor">Scale factor output parameter.</param>
            <param name="scaleOrientation">Scale orientation output parameter.</param>
            <param name="center">Center output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.GetTransform(OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@)">
            <summary>
            Return translation, rotation, scale, and scale orientation components of the 
            matrix. 
            <seealso cref="M:OIV.Inventor.SbMatrix.GetTransform(OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbRotation@)"/>.
            </summary>
            <param name="t">Translation output parameter.</param>
            <param name="r">Rotation output parameter.</param>
            <param name="s">Scale factor output parameter.</param>
            <param name="so">Scale orientation output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Det3(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns determinant of 3x3 sub matrix composed of given row and column indices 
            (0-3 for each).
            </summary>
            <param name="r1">First row index.</param>
            <param name="r2">Second row index.</param>
            <param name="r3">Third row index.</param>
            <param name="c1">First column index.</param>
            <param name="c2">Second column index.</param>
            <param name="c3">Third column index.</param>
            <returns>Determinant value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Det3">
            <summary>
            Returns determinant of upper-left 3x3 sub matrix.
            <seealso cref="M:OIV.Inventor.SbMatrix.Det3(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <returns>Determinant value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Det4">
            <summary>
            Returns determinant of entire matrix.
            </summary>
            <returns>Determinant value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Factor(OIV.Inventor.SbMatrix@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbMatrix@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbMatrix@)">
            <summary>
            Factors a matrix m into 5 pieces: m = <paramref name="r"/> 
            <paramref name="s"/> <paramref name="r"/>^ <paramref name="u"/> 
            <paramref name="t"/>, where r^ means transpose of r, and r and 
            u are rotations, s is a scale, and t is a translation. 
            Any projection 
            information is returned in <paramref name="proj"/>. 
            </summary>
            <param name="r">Rotation matrix output parameter.</param>
            <param name="s">Scale output parameter.</param>
            <param name="u">Rotation matrix output parameter.</param>
            <param name="t">Translation output parameter.</param>
            <param name="proj">Projection matrix output parameter.</param>
            <returns><b>false</b> if matrix is singular, <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Inverse">
            <summary>
            Returns inverse of matrix. Results are undefined for singular matrices. 
            Uses LU decomposition.
            </summary>
            <returns>Inverse of matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.LUDecomposition(System.Int32[],System.Single@)">
            <summary>
            Perform in-place LU decomposition of matrix. <paramref name="index"/> is index of rows in 
            matrix. <paramref name="d"/> is the parity of row swaps.
            </summary>
            <param name="index">Index of rows in matrix.</param>
            <param name="d">Parity of row swaps</param>
            <returns><b>false</b> if matrix is singular, <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.LUBackSubstitution(System.Int32[],System.Single[])">
            <summary>
            Perform back-substitution on LU-decomposed matrix. <paramref name="index"/> 
            is permutation of rows from original matrix.
            </summary>
            <param name="index">Permutation of rows from original matrix.</param>
            <param name="b"></param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Transpose">
            <summary>
            Returns transpose of matrix.
            </summary>
            <returns>Transpose of matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultRight(OIV.Inventor.SbMatrix@)">
            <overloads>
            Multiplies matrix by given matrix on right.
            </overloads>
            <summary>
            Multiplies matrix by given matrix on right.
            </summary>
            <param name="m">Multiplication matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultRight(OIV.Inventor.SbMatrix)">
            <summary>
            Multiplies matrix by given matrix on right.
            </summary>
            <param name="m">Multiplication matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultLeft(OIV.Inventor.SbMatrix@)">
            <overloads>
            Multiplies matrix by given matrix on left.
            </overloads>
            <summary>
            Multiplies matrix by given matrix on left.
            </summary>
            <param name="m">Multiplication matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultLeft(OIV.Inventor.SbMatrix)">
            <summary>
            Multiplies matrix by given matrix on left.
            </summary>
            <param name="m">Multiplication matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultMatrixVec(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Multiplies matrix by given column vector, giving vector result.
            </overloads>
            <summary>
            Multiplies matrix by given column vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultMatrixVec(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultMatrixVec(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result in Homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultMatrixVec(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result in Homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Multiplies given row vector by matrix, giving vector result.
            </overloads>
            <summary>
            Multiplies given row vector by matrix, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result in Homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result in Homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultDirMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Multiplies given row vector by matrix, giving vector result.
            </overloads>
            <summary>
            Multiplies given row vector by matrix, giving vector result. 
            </summary>
            <remarks> 
            <paramref name="src"/> is assumed to be a direction vector, 
            so translation part of matrix is ignored. 
            Note that if you wish to transform surface points and normals by a matrix, 
            call <see cref="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)"/> for the points and call <see cref="M:OIV.Inventor.SbMatrix.MultDirMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)"/>  
            on the inverse transpose of the matrix  for the normals.
            </remarks>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultDirMatrix(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result. 
            </summary>
            <remarks> 
            <paramref name="src"/> is assumed to be a direction vector, 
            so translation part of matrix is ignored. 
            Note that if you wish to transform surface points and normals by a matrix, 
            call <see cref="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)"/> for the points and 
            call <see cref="M:OIV.Inventor.SbMatrix.MultDirMatrix(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)"/> on the inverse 
            transpose of the matrix  for the normals.
            </remarks>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultLineMatrix(OIV.Inventor.SbLine@,OIV.Inventor.SbLine@)">
            <overloads>
            Multiplies the given line by the matrix.
            </overloads>
            <summary>
            Multiplies the given line's origin by the matrix, and the line's direction by 
            the rotation portion of the matrix.
            </summary>
            <param name="src">Source line.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.MultLineMatrix(OIV.Inventor.SbLine,OIV.Inventor.SbLine@)">
            <summary>
            Multiplies the given line's origin by the matrix, and the line's direction by 
            the rotation portion of the matrix.
            </summary>
            <param name="src">Source line.</param>
            <param name="dst">Output parameter for result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.op_Multiply(OIV.Inventor.SbMatrix,OIV.Inventor.SbMatrix)">
            <summary>
            The multiplication operator (*). 
            Operates binary multiplication of matrices.
            </summary>
            <returns>Resulting matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbMatrix"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.op_Equality(OIV.Inventor.SbMatrix,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.op_Inequality(OIV.Inventor.SbMatrix,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Equals(System.Object,System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="o"/> is a <see cref="T:OIV.Inventor.SbMatrix"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Translate(OIV.Inventor.SbVec3f)">
            <summary>
            Translates this matrix by the given vector.
            </summary>
            <param name="translation">Translation vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix.Scale(OIV.Inventor.SbVec3f)">
            <summary>
            Scales this matrix by the given vector. 
            </summary>
            <param name="scaleFactor">Scale vector.</param>
        </member>
        <member name="P:OIV.Inventor.SbMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            Make it look like a usual matrix (so you can do m[<paramref name="i"/>,<paramref name="j"/>]).
            </summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
            <returns>value at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:OIV.Inventor.SbMatrixd">
            <summary>
            4x4 matrix class (double precision). 
            <para>
            4x4 double precision matrix class/datatype. Although Open Inventor fields still 
            store only single precision values, for certain applications it is useful and 
            convenient to be able to store and manipulate double precision values, for example, 
            double precision coordinate data or values that will be used for further computation. 
            </para>
            The matrices are stored in row-major order. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.op_Explicit(OIV.Inventor.SbMatrixd)~OIV.Inventor.SbMatrix">
            <summary>
            
            </summary>
            <param name="matrixd"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor. Coefficients are given in row-major order.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.#ctor(System.Double[])">
            <summary>
            Constructor.
            </summary>
            <param name="mat">Array containing 16 double elements.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.#ctor(System.Double[0:,0:])">
            <summary>
            Constructor.
            </summary>
            <param name="mat">Array containing 16 double elements.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetValue(System.Double[])">
            <summary>
            Sets value from an array of 16 single components.
            </summary>
            <param name="mat">Array containing matrix elements.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetValue(System.Double[0:,0:])">
            <summary>
            Sets value from an array of 16 single components.
            </summary>
            <param name="mat">Array containing matrix elements.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetValue(OIV.Inventor.SbMatrix@)">
            <overloads>
            Sets value from a single precision matrix.
            </overloads>
            <summary>
            Sets value from a single precision matrix.
            </summary>
            <param name="m">Single precision matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetValue(OIV.Inventor.SbMatrix)">
            <summary>
            Sets value from a single precision matrix.
            </summary>
            <param name="m">Single precision matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MakeIdentity">
            <summary>
            Sets matrix to be identity.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Identity">
            <summary>
            Returns an identity matrix.
            </summary>
            <returns>Identity matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetRotate(OIV.Inventor.SbRotationd@)">
            <overloads>
            Sets matrix to rotate.
            </overloads>
            <summary>
            Sets matrix to rotate by given rotation.
            </summary>
            <param name="q">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetRotate(OIV.Inventor.SbRotationd)">
            <summary>
            Sets matrix to rotate by given rotation.
            </summary>
            <param name="q">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetScale(System.Double)">
            <overloads>
            Sets matrix to scale.
            </overloads>
            <summary>
            Sets matrix to scale by given uniform factor.
            </summary>
            <param name="s">Uniform scale.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetScale(OIV.Inventor.SbVec3d@)">
            <summary>
            Sets matrix to scale by given vector.
            </summary>
            <param name="s">Scale vector value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetScale(OIV.Inventor.SbVec3d)">
            <summary>
            Sets matrix to scale by given vector.
            </summary>
            <param name="s">Scale vector value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTranslate(OIV.Inventor.SbVec3d@)">
            <overloads>
            Sets matrix to translate.
            </overloads>
            <summary>
            Sets matrix to translate by given vector.
            </summary>
            <param name="t">Translation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTranslate(OIV.Inventor.SbVec3d)">
            <summary>
            Sets matrix to translate by given vector.
            </summary>
            <param name="t">Translation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTransform(OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Composes the matrix.
            </overloads>
            <summary>
            Composes the matrix based on a translation, rotation, scale, orientation for 
            scale, and center. The @B scaleOrientation @b chooses the primary axes for the scale.
            The <paramref name="center"/> is the center point for scaling and rotation.     
            </summary>
            <param name="translation">Translation value.</param>
            <param name="rotation">Rotation value.</param>
            <param name="scaleFactor">Scale factor value.</param>
            <param name="scaleOrientation">Scale orientation value.</param>
            <param name="center">Center for scaling and rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTransform(OIV.Inventor.SbVec3d,OIV.Inventor.SbRotationd,OIV.Inventor.SbVec3d,OIV.Inventor.SbRotationd,OIV.Inventor.SbVec3d)">
            <summary>
            Composes the matrix based on a translation, rotation, scale, orientation for 
            scale, and center. The @B scaleOrientation @b chooses the primary axes for the scale.
            The <paramref name="center"/> is the center point for scaling and rotation.     
            </summary>
            <param name="translation">Translation value.</param>
            <param name="rotation">Rotation value.</param>
            <param name="scaleFactor">Scale factor value.</param>
            <param name="scaleOrientation">Scale orientation value.</param>
            <param name="center">Center for scaling and rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTransform(OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@)">
            <summary>
            Composes the matrix based on a translation, rotation, and scale.  A scale orientation 
            value of (0,0,0,1) is used. The center point for scaling and rotation is (0,0,0).
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTransform(OIV.Inventor.SbVec3d,OIV.Inventor.SbRotationd,OIV.Inventor.SbVec3d)">
            <summary>
            Composes the matrix based on a translation, rotation, and scale.  A scale orientation 
            value of (0,0,0,1) is used. The center point for scaling and rotation is (0,0,0).
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTransform(OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@)">
            <summary>
            Composes the matrix based on a translation, rotation, scale, and orientation for 
            scale. The <paramref name="so"/> chooses the primary axes for the scale. The 
            center point for scaling and rotation is (0,0,0). 
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale factor value.</param>
            <param name="so">Scale orientation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.SetTransform(OIV.Inventor.SbVec3d,OIV.Inventor.SbRotationd,OIV.Inventor.SbVec3d,OIV.Inventor.SbRotationd)">
            <summary>
            Composes the matrix based on a translation, rotation, scale, and orientation for 
            scale. The <paramref name="so"/> chooses the primary axes for the scale. The 
            center point for scaling and rotation is (0,0,0). 
            </summary>
            <param name="t">Translation value.</param>
            <param name="r">Rotation value.</param>
            <param name="s">Scale factor value.</param>
            <param name="so">Scale orientation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.GetTransform(OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@)">
            <summary>
            Decomposes the matrix into a translation, rotation, scale, and scale 
            orientation. Any projection information is discarded. The decomposition depends 
            upon choice of center point for rotation and scaling, which is optional as the 
            last parameter. Note that if the center is 0, this method is the same as 
            <see cref="M:OIV.Inventor.SbMatrixd.Factor(OIV.Inventor.SbMatrixd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbMatrixd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbMatrixd@)"/> where t is <paramref name="translation"/>, u is <paramref name="rotation"/>, 
            s is <paramref name="scaleFactor"/> and r is <paramref name="scaleOrientation"/>.
            </summary>
            <param name="translation">Translation output parameter.</param>
            <param name="rotation">Rotation output parameter.</param>
            <param name="scaleFactor">Scale factor output parameter.</param>
            <param name="scaleOrientation">Scale orientation output parameter.</param>
            <param name="center">Center output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.GetTransform(OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@)">
            <summary>
            Return translation, rotation, scale, and scale orientation components of the 
            matrix. 
            <seealso cref="M:OIV.Inventor.SbMatrixd.GetTransform(OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbRotationd@)"/>.
            </summary>
            <param name="t">Translation output parameter.</param>
            <param name="r">Rotation output parameter.</param>
            <param name="s">Scale factor output parameter.</param>
            <param name="so">Scale orientation output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Det3(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns determinant of 3x3 sub matrix composed of given row and column indices 
            (0-3 for each).
            </summary>
            <param name="r1">First row index.</param>
            <param name="r2">Second row index.</param>
            <param name="r3">Third row index.</param>
            <param name="c1">First column index.</param>
            <param name="c2">Second column index.</param>
            <param name="c3">Third column index.</param>
            <returns>Determinant value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Det3">
            <summary>
            Returns determinant of upper-left 3x3 sub matrix.
            <seealso cref="M:OIV.Inventor.SbMatrixd.Det3(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <returns>Determinant value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Det4">
            <summary>
            Returns determinant of entire matrix.
            </summary>
            <returns>Determinant value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Factor(OIV.Inventor.SbMatrixd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbMatrixd@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbMatrixd@)">
            <summary>
            Factors a matrix m into 5 pieces: m = <paramref name="r"/> 
            <paramref name="s"/> <paramref name="r"/>^ <paramref name="u"/> 
            <paramref name="t"/>, where r^ means transpose of r, and r and 
            u are rotations, s is a scale, and t is a translation. 
            Any projection 
            information is returned in <paramref name="proj"/>. 
            </summary>
            <param name="r">Rotation matrix output parameter.</param>
            <param name="s">Scale output parameter.</param>
            <param name="u">Rotation matrix output parameter.</param>
            <param name="t">Translation output parameter.</param>
            <param name="proj">Projection matrix output parameter.</param>
            <returns><b>false</b> if matrix is singular, <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Inverse">
            <summary>
            Returns inverse of matrix. Results are undefined for singular matrices. Uses LU 
            decomposition.
            </summary>
            <returns>Inverse matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.LUDecomposition(System.Int32[],System.Double@)">
            <summary>
            Perform in-place LU decomposition of matrix. <paramref name="index"/> is index of rows in 
            matrix. <paramref name="d"/> is the parity of row swaps.
            </summary>
            <param name="index">Index of rows in matrix.</param>
            <param name="d">Parity of row swaps</param>
            <returns><b>false</b> if matrix is singular, <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.LUBackSubstitution(System.Int32[],System.Double[])">
            <summary>
            Perform back-substitution on LU-decomposed matrix. <paramref name="index"/> 
            is permutation of rows from original matrix.
            </summary>
            <param name="index">Permutation of rows from original matrix.</param>
            <param name="b"></param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Transpose">
            <summary>
            Returns transpose of matrix.
            </summary>
            <returns>Transpose of matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultRight(OIV.Inventor.SbMatrixd@)">
            <overloads>
            Multiplies matrix by given matrix on right.
            </overloads>
            <summary>
            Multiplies matrix by given matrix on right.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultRight(OIV.Inventor.SbMatrixd)">
            <summary>
            Multiplies matrix by given matrix on right.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultLeft(OIV.Inventor.SbMatrixd@)">
            <overloads>
            Multiplies matrix by given matrix on left.
            </overloads>
            <summary>
            Multiplies matrix by given matrix on left.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultLeft(OIV.Inventor.SbMatrixd)">
            <summary>
            Multiplies matrix by given matrix on left.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultMatrixVec(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Multiplies matrix by given column vector.
            </overloads>
            <summary>
            Multiplies matrix by given column vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultMatrixVec(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultMatrixVec(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result in Homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultMatrixVec(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result in Homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultVecMatrix(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Multiplies matrix by given row vector.
            </overloads>
            <summary>
            Multiplies matrix by given row vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultVecMatrix(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d@)">
            <summary>
            Multiplies matrix by given row vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultVecMatrix(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result in 
            homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultVecMatrix(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec4f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result in 
            homogeneous coordinate.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultDirMatrix(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Multiplies given row vector by matrix.
            </overloads>
            <summary>
            Multiplies given row vector by matrix, giving vector result. 
            </summary>
            <remarks>
            <paramref name="src"/> is assumed to be a direction vector, 
            so translation part of matrix is ignored. 
            Note that if you wish to transform surface points and normals by a matrix, 
            call <see cref="M:OIV.Inventor.SbMatrixd.MultVecMatrix(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)"/> for the points and 
            call <see cref="M:OIV.Inventor.SbMatrixd.MultDirMatrix(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)"/> on the inverse 
            transpose of the matrix for the normals.
            </remarks>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultDirMatrix(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result. 
            </summary>
            <remarks>
            <paramref name="src"/> is assumed to be a direction vector, 
            so translation part of matrix is ignored. 
            Note that if you wish to transform surface points and normals by a matrix, 
            call <see cref="M:OIV.Inventor.SbMatrixd.MultVecMatrix(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d@)"/> for the points and 
            call <see cref="M:OIV.Inventor.SbMatrixd.MultDirMatrix(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d@)"/> on the inverse 
            transpose of the matrix for the normals.
            </remarks>
            <param name="src">Source vector.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultLineMatrix(OIV.Inventor.SbLine@,OIV.Inventor.SbLine@)">
            <overloads>
            Multiplies the given line by the matrix
            </overloads>
            <summary>
            Multiplies the given line's origin by the matrix, and the line's direction by 
            the rotation portion of the matrix.
            </summary>
            <param name="src">Source line,</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.MultLineMatrix(OIV.Inventor.SbLine,OIV.Inventor.SbLine@)">
            <summary>
            Multiplies the given line's origin by the matrix, and the line's direction by 
            the rotation portion of the matrix.
            </summary>
            <param name="src">Source line,</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.op_Multiply(OIV.Inventor.SbMatrixd,OIV.Inventor.SbMatrixd)">
            <summary>
            The multiplication operator (*). 
            Operates binary multiplication of matrices.
            </summary>
            <returns>Resulting matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbMatrixd"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.op_Equality(OIV.Inventor.SbMatrixd,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.op_Inequality(OIV.Inventor.SbMatrixd,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Equals(System.Object,System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="o"/> is a <see cref="T:OIV.Inventor.SbMatrix"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Translate(OIV.Inventor.SbVec3d)">
            <summary>
            Translates this matrix by the given vector.
            </summary>
            <param name="translation">Translation vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrixd.Scale(OIV.Inventor.SbVec3d)">
            <summary>
            Scales this matrix by the given vector. 
            </summary>
            <param name="scaleFactor">Scale vector.</param>
        </member>
        <member name="P:OIV.Inventor.SbMatrixd.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            Make it look like a usual matrix (so you can do m[<paramref name="i"/>,<paramref name="j"/>]).
            </summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
            <returns>value at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:OIV.Inventor.SbMatrix3">
            <summary>
            3x3 matrix class. 
            3x3 matrix class/datatype. The matrices are stored in row-major order
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor given each matrix coefficients.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetValue(System.Single[0:,0:])">
            <summary>
            Sets value from 3x3 array of elements.
            </summary>
            <param name="mat">Array of elements</param>
            <exception cref="T:System.ArgumentException">If array length differs from 9.</exception>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetValue(System.Single[])">
            <summary>
            Sets value from an array of 9 elements.
            </summary>
            <param name="mat">Array of elements.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 9.</exception>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MakeIdentity">
            <summary>
            Sets matrix to be identity.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.Identity">
            <summary>
            Returns an identity matrix.
            </summary>
            <returns>Identity matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetRotate(OIV.Inventor.SbRotation@)">
            <overloads>
            Sets matrix to rotate:
            </overloads>
            <summary>
            Sets matrix to rotate by given rotation.
            </summary>
            <param name="q">Rotation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetRotate(OIV.Inventor.SbRotation)">
            <summary>
            Sets matrix to rotate by given rotation.
            </summary>
            <param name="q">Rotation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetScale(System.Single)">
            <overloads>
            Sets matrix to scale.
            </overloads>
            <summary>
            Sets matrix to scale by given uniform factor.
            </summary>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetScale(OIV.Inventor.SbVec3f@)">
            <summary>
            Sets matrix to scale by given vector.
            </summary>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.SetScale(OIV.Inventor.SbVec3f)">
            <summary>
            Sets matrix to scale by given vector.
            </summary>
            <param name="s">Scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultRight(OIV.Inventor.SbMatrix3@)">
            <overloads>
            Multiplies matrix by given matrix on right.
            </overloads>
            <summary>
            Multiplies matrix by given matrix on right.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultRight(OIV.Inventor.SbMatrix3)">
            <summary>
            Multiplies matrix by given matrix on right.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultLeft(OIV.Inventor.SbMatrix3@)">
            <overloads>
            Multiplies matrix by given matrix on left.
            </overloads>
            <summary>
            Multiplies matrix by given matrix on left.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultLeft(OIV.Inventor.SbMatrix3)">
            <summary>
            Multiplies matrix by given matrix on left.
            </summary>
            <param name="m">Multiplicative matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultMatrixVec(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Multiplies matrix by given column vector.
            </overloads>
            <summary>
            Multiplies matrix by given column vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultMatrixVec(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Multiplies matrix by given column vector, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultVecMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Multiplies given row vector by matrix.
            </overloads>
            <summary>
            Multiplies given row vector by matrix, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.MultVecMatrix(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Multiplies given row vector by matrix, giving vector result.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.op_Multiply(OIV.Inventor.SbMatrix3,OIV.Inventor.SbMatrix3)">
            <summary>
            The multiplication operator (*). 
            Operates binary multiplication of matrices.
            </summary>
            <returns>Resulting matrix.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbMatrix3"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.op_Equality(OIV.Inventor.SbMatrix3,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbMatrix3.op_Inequality(OIV.Inventor.SbMatrix3,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbMatrix3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            Make it look like a usual matrix (so you can do m[<paramref name="i"/>,<paramref name="j"/>]).
            </summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
            <returns>value at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:OIV.Inventor.SbSphere">
            <summary>
            Class for representing a sphere. 
            <para>
            Represents a sphere in 3D. This is a lightweight datatype that is 
            used for arguments or return values in the Open Inventor toolkit. 
            See <see cref="T:OIV.Inventor.Nodes.SoSphere"/> for a database sphere 
            (used for rendering, picking, etc.). 
            </para>
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbSphere.#ctor(OIV.Inventor.SbVec3f@,System.Single)">
            <overloads>
            Constructor that takes a center and a radius.
            </overloads>
            <summary>
            Constructor that takes a center and a radius.
            </summary>
            <param name="c">Center value.</param>
            <param name="r">Radius value.</param>
        </member>
        <member name="M:OIV.Inventor.SbSphere.#ctor(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Constructor that takes a center and a radius.
            </summary>
            <param name="c">Center value.</param>
            <param name="r">Radius value.</param>
        </member>
        <member name="M:OIV.Inventor.SbSphere.SetValue(OIV.Inventor.SbVec3f@,System.Single)">
            <overloads>
            Change the center and radius.
            </overloads>
            <summary>
            Change the center and radius.
            </summary>
            <param name="c">Center value.</param>
            <param name="r">Radius value.</param>
        </member>
        <member name="M:OIV.Inventor.SbSphere.SetValue(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Change the center and radius.
            </summary>
            <param name="c">Center value.</param>
            <param name="r">Radius value.</param>
        </member>
        <member name="M:OIV.Inventor.SbSphere.SetCenter(OIV.Inventor.SbVec3f)">
            <summary>
            Use <see cref="P:OIV.Inventor.SbSphere.Center"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbSphere.SetRadius(System.Single)">
            <summary>
            Use <see cref="P:OIV.Inventor.SbSphere.Radius"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbSphere.GetCenter">
            <summary>
            Use <see cref="P:OIV.Inventor.SbSphere.Center"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbSphere.GetRadius">
            <summary>
            Use <see cref="P:OIV.Inventor.SbSphere.Radius"/> property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbSphere.Circumscribe(OIV.Inventor.SbBox3f@)">
            <overloads>
            Adapt sphere to contain a given box.
            </overloads>
            <summary>
            Adapt sphere to contain a given box.
            </summary>
            <param name="box">Box to contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbSphere.Circumscribe(OIV.Inventor.SbBox3f)">
            <summary>
            Adapt sphere to contain a given box.
            </summary>
            <param name="box">Box to contain.</param>
        </member>
        <member name="M:OIV.Inventor.SbSphere.Intersect(OIV.Inventor.SbLine@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Intersect line and sphere.
            </overloads>
            <summary>
            Intersect line and sphere, returning <b>true</b> if there is an intersection. The line 
            is treated as a ray.
            </summary>
            <param name="l">Intersection line.</param>
            <param name="intersection">Output parameter to store the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbSphere.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect line and sphere, returning <b>true</b> if there is an intersection. The line 
            is treated as a ray.
            </summary>
            <param name="l">Intersection line.</param>
            <param name="intersection">Output parameter to store the intersection.</param>
            <returns><b>true</b> if an intersection is found, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbSphere.Intersect(OIV.Inventor.SbLine@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect line and sphere, returning <b>true</b> if there is an intersection. The line 
            is treated as a ray.
            </summary>
            <param name="l">Intersection line.</param>
            <param name="enter">Output parameter to store the first intersection found.</param>
            <param name="exit">Output parameter to store the last intersection found.</param>
            <returns><b>true</b> if intersect, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbSphere.Intersect(OIV.Inventor.SbLine,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Intersect line and sphere, returning <b>true</b> if there is an intersection. The line 
            is treated as a ray.
            </summary>
            <param name="l">Intersection line.</param>
            <param name="enter">Output parameter to store the first intersection found.</param>
            <param name="exit">Output parameter to store the last intersection found.</param>
            <returns><b>true</b> if intersect, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbSphere.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbSphere"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the center and radius.</returns>
        </member>
        <member name="P:OIV.Inventor.SbSphere.Center">
            <summary>
            Gets or sets the center of the sphere.
            </summary>
        </member>
        <member name="P:OIV.Inventor.SbSphere.Radius">
            <summary>
            Gets or sets the radius of the sphere.
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbColorRGBA">
            <summary>
            ColorRGBA vector class. </summary>
            <remarks>This class is used to represent an RGBA color. 
            Each component of the vector is a floating-point number between 0.0 and 1.0.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.#ctor(OIV.Inventor.SbVec4f)">
            <summary>
            Constructor that takes a vector value.
            </summary>
            <param name="vec4f"></param>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.#ctor(System.Single[])">
            <summary>
            Constructor that takes an array of 4 floats.
            </summary>
            <param name="rgba">Array containing color components.</param>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor that takes 4 floats.
            </summary>
            <param name="a">alpha component value.</param>
            <param name="r">red component value.</param>
            <param name="b">blue component value.</param>
            <param name="g">green component value.</param>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.SetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets value of color vector from 4 RGBA (Red, Green, Blue and Alphe) components.
            </summary>
            <param name="a">alpha component value.</param>
            <param name="r">red component value.</param>
            <param name="b">blue component value.</param>
            <param name="g">green component value.</param>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.SetValue(System.Single[])">
            <summary>
            Sets value of color vector from array of 4 RGBA components.
            </summary>
            <param name="rgba">Array of 4 RGBA components</param>
            <exception cref="T:System.ArgumentException">If array length differs from four.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.GetValue(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns 4 individual RGBA components.
            </summary>
            <param name="a">Output parameter for alpha component.</param>
            <param name="b">Output parameter for blue component.</param>
            <param name="g">Output parameter for green component.</param>
            <param name="r">Output parameter for ref component.</param>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.GetValue(System.Single[])">
            <summary>
            Fill the array with the 4 RGBA components. </summary>
            <remarks>The array must be allocated before the method call.</remarks>
            <param name="rgba">Output array to store the result.</param>
            <exception cref="T:System.ArgumentException">If output array length differs from four.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.op_Implicit(OIV.Inventor.SbColorRGBA)~OIV.Inventor.SbVec4f">
            <summary>
            Implicit cast operator to <see cref="T:OIV.Inventor.SbVec4f"/>.
            </summary>
            <param name="c"><see cref="T:OIV.Inventor.SbColorRGBA">color</see> to cast.</param>
            <returns>Resulting <see cref="T:OIV.Inventor.SbVec4f">vector</see>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbColorRGBA"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbColorRGBA"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the RGBA component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.op_Equality(OIV.Inventor.SbColorRGBA,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColorRGBA.op_Inequality(OIV.Inventor.SbColorRGBA,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="P:OIV.Inventor.SbColorRGBA.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>value at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="P:OIV.Inventor.SbColorRGBA.R">
            <summary>
            Gets or sets the red component of color.
            </summary>
            <value>Red value of color.</value>
        </member>
        <member name="P:OIV.Inventor.SbColorRGBA.G">
            <summary>
            Gets or sets the green component of color.
            </summary>
            <value>Green value of color.</value>
        </member>
        <member name="P:OIV.Inventor.SbColorRGBA.B">
            <summary>
            Gets or sets the blue component of color.
            </summary>
            <value>Blue value of color.</value>
        </member>
        <member name="P:OIV.Inventor.SbColorRGBA.A">
            <summary>
            Gets or sets the alpha component of color.
            </summary>
            <value>Alpha value of color.</value>
        </member>
        <member name="T:OIV.Inventor.SbColor">
            <summary>
            Color vector class. </summary>
            <remarks> This class is used to represent an RGB color. 
            Each component of the vector is a floating-point number between 0.0 and 1.0. 
            There are routines to convert back and forth between RGB and HSV.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbColor.#ctor(OIV.Inventor.SbVec3f)">
            <summary>
            Constructor that takes a <see cref="T:OIV.Inventor.SbVec3f"/> value.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbColor.#ctor(System.Single[])">
            <summary>
            Constructor that takes an array of 3 floats.
            </summary>
            <param name="rgb">array of color components.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor that takes 3 floats.
            </summary>
            <param name="r">red component.</param>
            <param name="b">blue component.</param>
            <param name="g">green component.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.SetHSVValue(System.Single,System.Single,System.Single)">
            <summary>
            Sets value of color vector from 3 HSV (hue, saturation, and value) components. </summary>
            <param name="hue">Hue value.</param>
            <param name="sat">Sat value.</param>
            <param name="val">Value / brightness value.</param>
            <remarks>Value is the same as brightness of the color.</remarks>
        </member>
        <member name="M:OIV.Inventor.SbColor.SetHSVValue(System.Single[])">
            <summary>
            Sets value of color vector from array of 3 HSV components.
            </summary>
            <param name="hsv">array of color components.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.SetRGBValue(System.Single,System.Single,System.Single)">
            <summary>
            Sets value of color vector from 3 RGB (Red, Green, and Blue) components.
            </summary>
            <param name="r">red component.</param>
            <param name="g">green component.</param>
            <param name="b">blue component.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.SetRGBValue(System.Single[])">
            <summary>
            Sets value of color vector from array of 3 RGB components.
            </summary>
            <param name="rgb">array of RGB component.</param>
            <exception cref="T:System.ArgumentException">If array length does not equal three.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetRGBValue(System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns 3 individual RGB components.
            </summary>
            <param name="b">output parameter to store blue component.</param>
            <param name="r">output parameter to store red component.</param>
            <param name="g">output parameter to store green component.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetHSVValue(System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns 3 individual HSV components.
            </summary>
            <param name="hue">output parameter to store hue component.</param>
            <param name="sat">output parameter to store saturation component.</param>
            <param name="val">output parameter to store value component.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetRGBValue(System.Single[])">
            <summary>
            Fill an array of 3 RGB components. 
            </summary>
            <remarks>The array must be allocated before the method call.</remarks>
            <param name="rgb">Allocated array to store the components.</param>
            <exception cref="T:System.ArgumentException">If array length is less than three.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetHSVValue(System.Single[])">
            <summary>
            Fill an array of 3 HSV components. </summary>
            <remarks>The array must be allocated before the method call.</remarks>    
            <param name="hsv">Allocated array to store the components.</param>
            <exception cref="T:System.ArgumentException">If array length is less than three.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColor.SetPackedValue(System.UInt32,System.Single@)">
            <summary>
            Sets value of color vector from an RGBA packed color value. </summary>
            <remarks> The packed color 
            format expressed in hexadecimal is 0xrrggbbaa, where 
            <list type="bullet">
            <item>
            <description>rr is the red value</description>
            </item>
            <item>
            <description>gg is the green value</description>
            </item>
            <item>
            <description>bb is the blue value</description>
            </item>
            <item>
            <description>aa is the alpha value</description>
            </item>
            </list> 
            <para>
            RGBA component values range from 0 to 0xFF (255). The returned transparency value 
            is a floating point value between 0.0 (opaque) and 1.0 (completely transparent). 
            It is derived from the alpha component of the RGBA color.
            </para>
            </remarks>
            <param name="orderedRGBA">RGBA packed color value.</param>
            <param name="transparency">Transparency output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetPackedValue">
            <summary>
            Returns an RGBA packed color value, derived from the color vector and the passed 
            transparency value. </summary>
            <remarks>The alpha component is set to (1.0 - transparency) * 255, 
            resulting in a hex value between 0 and 0xFF. If transparency not specified, 
            alpha is set to 0xFF (opaque).
            </remarks>
            <returns>RGBA packed color value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetPackedValue(System.Single)">
            <summary>
            Returns an RGBA packed color value, derived from the color vector and the passed transparency value. </summary>
            <remarks>
            The alpha component is set to (1.0 - transparency) * 255, 
            resulting in a hex value between 0 and 0xFF. 
            If transparency not specified, alpha is set to 0xFF (opaque). 
            </remarks>
            <param name="transparency">Transparency value.</param>
            <returns>RGBA packed color value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Equality(OIV.Inventor.SbColor,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Inequality(OIV.Inventor.SbColor,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbColor"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbColor"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the RGB component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Subtraction(OIV.Inventor.SbColor,OIV.Inventor.SbColor)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="c1"/> 
            and <paramref name="c2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_UnaryNegation(OIV.Inventor.SbColor)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="c1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Addition(OIV.Inventor.SbColor,OIV.Inventor.SbColor)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="c1"/> 
            and <paramref name="c2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Multiply(OIV.Inventor.SbColor,OIV.Inventor.SbColor)">
            <summary>
            The multiplication operator (*), which multiply each component of 
            <paramref name="c1"/> by each component of vector <paramref name="c2"/>.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Multiply(OIV.Inventor.SbColor,System.Single)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="c1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Multiply(System.Single,OIV.Inventor.SbColor)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="c1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Division(OIV.Inventor.SbColor,OIV.Inventor.SbColor)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="c1"/> 
            by components of vector <paramref name="c2"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If one of component's vector 
            <paramref name="c2"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Division(OIV.Inventor.SbColor,System.Single)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="c1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbColor.op_Implicit(OIV.Inventor.SbColor)~OIV.Inventor.SbVec3f">
            <summary>
            Implicit cast operator to <see cref="T:OIV.Inventor.SbVec3f"/>.
            </summary>
            <param name="c"><see cref="T:OIV.Inventor.SbColor">color</see> to cast.</param>
            <returns>Resulting <see cref="T:OIV.Inventor.SbVec3f">vector</see>.</returns>
        </member>
        <member name="P:OIV.Inventor.SbColor.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>value at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="P:OIV.Inventor.SbColor.R">
            <summary>
            Gets or sets the red component of the color.
            </summary>
            <value>Red component of the color.</value>
        </member>
        <member name="P:OIV.Inventor.SbColor.G">
            <summary>
            Gets or sets the green component of the color.
            </summary>
            <value>Green component of the color.</value>
        </member>
        <member name="P:OIV.Inventor.SbColor.B">
            <summary>
            Gets or sets the blue component of the color.
            </summary>
            <value>Blue component of the color.</value>
        </member>
        <member name="T:OIV.Inventor.SbElapsedTime">
            <summary>
            Class for measuring elapsed time with high resolution.
            <para>
            This measures elapsed time in seconds. It uses the highest resolution timer 
            available on the system, to allow measuring very short intervals.  There is 
            no guarantee the timer resolution will be better than SbTime (which is used 
            if no better method is available).
            </para>
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbElapsedTime.Reset">
            <summary>
            Resets timer.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbElapsedTime.GetElapsed">
            <summary>
            Returns elapsed time in seconds.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbElapsedTime.GetElapsedTime">
            <summary>
            Returns elapsed time.
            </summary>
        </member>
        <member name="T:OIV.Inventor.ErrorHandler">
            <summary>
            Internal class. This class is not intented to be used directly in your code.
            </summary>
        </member>
        <member name="T:OIV.Inventor.PreferencesHandler">
            <summary>
            Internal class. This class is not intented to be used directly in your code.
            </summary>
        </member>
        <member name="T:OIV.Inventor.MemoryUtils">
            <summary>
            Internal class. This class is not intented to be used directly in your code.
            </summary>
        </member>
        <member name="T:OIV.Inventor.Generic.SbPair`2">
            <summary>
            Provides a basic utility structure that is used to store two related objects.
            </summary>
            <typeparam name="T1">The type of the first object in the pair.</typeparam>
            <typeparam name="T2">The type of the second object in the pair.</typeparam>
        </member>
        <member name="F:OIV.Inventor.Generic.SbPair`2.m_first">
            <summary>
            The first object of the object pair.
            </summary>
        </member>
        <member name="F:OIV.Inventor.Generic.SbPair`2.m_second">
            <summary>
            The second object of the object pair. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.Generic.SbPair`2.#ctor(OIV.Inventor.Generic.SbPair{`0,`1})">
            <summary>
            Copy constructor.
            </summary>
            <param name="pair"></param>
        </member>
        <member name="M:OIV.Inventor.Generic.SbPair`2.#ctor(`0,`1)">
            <summary>
            Initialize a new instance, using the specified object pair.
            </summary>
            <param name="first">An object.</param>
            <param name="second">An object.</param>
        </member>
        <member name="P:OIV.Inventor.Generic.SbPair`2.First">
            <summary>
            Gets or sets the first object of the object pair.
            </summary>
        </member>
        <member name="P:OIV.Inventor.Generic.SbPair`2.Second">
            <summary>
            Gets or sets the second object of the object pair.
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbRotation">
            <summary>
            Class for representing a rotation. 
            Object that stores a rotation. There are several ways 
            to specify a rotation: quaternion (4 floats, in the order x, y, z, w), 
            4x4 rotation matrix, or axis and angle. 
            All angles are in radians and all rotations are right-handed.
            </summary>
            <remarks>Rotations are stored internally as quaternions.</remarks>
            <seealso cref="T:OIV.Inventor.SbRotationd"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(System.Single[])">
            <overloads>
            Constructor for rotation.
            </overloads>
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>The constructors that take four floats 
            create a quaternion from those floats (careful, this differs from the four 
            numbers in an axis/radian definition). 
            </remarks>
            <param name="v">Quaternion value.</param>
            <seealso cref="M:OIV.Inventor.SbRotation.SetValue(System.Single[])"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>The constructors that take four floats 
            create a quaternion from those floats (careful, this differs from the four 
            numbers in an axis/radian definition). 
            </remarks>
            <param name="q0">First quaternion's component value.</param>
            <param name="q1">Second quaternion's component value.</param>
            <param name="q2">Third quaternion's component value.</param>
            <param name="q3">Last quaternion's component value.</param>
            <seealso cref="M:OIV.Inventor.SbRotation.SetValue(System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(OIV.Inventor.SbMatrix@)">
            <summary>
            Constructor for rotation.
            </summary>
            <remarks>
            The matrix constructor requires a valid 
            rotation matrix.
            </remarks>
            <param name="m">Rotation matrix.</param>
            <seealso cref="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbMatrix)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(OIV.Inventor.SbMatrix)">
            <summary>
            Constructor for rotation.
            </summary>
            <remarks>
            The matrix constructor requires a valid 
            rotation matrix.
            </remarks>
            <param name="m">Rotation matrix.</param>
            <seealso cref="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbMatrix)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(OIV.Inventor.SbVec3f@,System.Single)">
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>
            The axis/radians constructor creates a 
            rotation of angle radians about the given axis.
            </remarks>
            <param name="axis">Axis of rotation.</param>
            <param name="radians">Angle of rotation (radians value).</param>
            <seealso cref="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbVec3f,System.Single)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>
            The axis/radians constructor creates a 
            rotation of angle radians about the given axis.
            </remarks>
            <param name="axis">Axis of rotation.</param>
            <param name="radians">Angle of rotation (radians value).</param>
            <seealso cref="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbVec3f,System.Single)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Constructors for rotation. The rotateFrom/To constructor defines rotation 
            that rotates from one vector into another. The <paramref name="rotateFrom"/> 
            and <paramref name="rotateTo"/> vectors are normalized by the constructor 
            before calculating the rotation.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.#ctor(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Constructors for rotation. The rotateFrom/To constructor defines rotation 
            that rotates from one vector into another. The <paramref name="rotateFrom"/> 
            and <paramref name="rotateTo"/> vectors are normalized by the constructor 
            before calculating the rotation.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.GetValue(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets 4 individual components of rotation quaternion.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbRotation.GetValue(OIV.Inventor.SbVec3f@,System.Single@)">
            <summary>
            Gets corresponding 3D rotation axis vector and angle in radians.
            </summary>
            <param name="axis">Axis output parameter.</param>
            <param name="radians">Angle output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.GetValue(OIV.Inventor.SbMatrix@)">
            <summary>
            Gets corresponding 4x4 rotation matrix.
            </summary>
            <param name="matrix">Matrix output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.GetValue(OIV.Inventor.SbMatrix3@)">
            <summary>
            Gets corresponding 3x3 rotation matrix.
            </summary>
            <param name="m">Matrix output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.GetValue(OIV.Inventor.SbMatrixd@)">
            <summary>
            Gets corresponding 4x4 rotation matrix.
            </summary>
            <param name="matrix">Matrix output parameter.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Invert">
            <summary>
            Changes a rotation to be its inverse.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Inverse">
            <summary>
            Returns the inverse of a rotation.
            </summary>
            <returns>Inverse rotation value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(System.Single[])">
            <overloads>
            Sets value of rotation.
            </overloads>
            <summary>
            Sets value of rotation from array of 4 components of a quaternion.
            </summary>
            <param name="q">Quaternion array.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets value of rotation from 4 individual components of a quaternion.
            </summary>
            <param name="q0">First quaternion's component value.</param>
            <param name="q1">Second quaternion's component value.</param>
            <param name="q2">Third quaternion's component value.</param>
            <param name="q3">Last quaternion's component value.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbMatrix@)">
            <summary>
            Sets value of rotation from a rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbMatrix)">
            <summary>
            Sets value of rotation from a rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbVec3f@,System.Single)">
            <summary>
            Sets value of vector from 3D rotation axis vector and angle in radians.
            </summary>
            <param name="axis">Axis value.</param>
            <param name="radians">Angle value (radians).</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Sets value of vector from 3D rotation axis vector and angle in radians.
            </summary>
            <param name="axis">Axis value.</param>
            <param name="radians">Angle value (radians).</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Sets rotation to rotate one direction vector to another. The <paramref name="rotateFrom"/> 
            and <paramref name="rotateTo"/> arguments are normalized before the rotation is calculated.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Sets rotation to rotate one direction vector to another. The <paramref name="rotateFrom"/> 
            and <paramref name="rotateTo"/> arguments are normalized before the rotation is calculated.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbRotationd@)">
            <summary>
            Sets rotation from a double precision rotation.
            </summary>
            <param name="rotated">Double precision rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbRotationd)">
            <summary>
            Sets rotation from a double precision rotation.
            </summary>
            <param name="rotated">Double precision rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbMatrixd@)">
            <summary>
            Sets rotation from a double precision rotation matrix.
            </summary>
            <param name="m">Double precision matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.SetValue(OIV.Inventor.SbMatrixd)">
            <summary>
            Sets rotation from a double precision rotation matrix.
            </summary>
            <param name="m">Double precision matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.op_Equality(OIV.Inventor.SbRotation,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.op_Inequality(OIV.Inventor.SbRotation,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbRotation"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Equals(System.Object,System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="o"/> is a <see cref="T:OIV.Inventor.SbRotation"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.op_Explicit(OIV.Inventor.SbRotation)~OIV.Inventor.SbMatrix">
            <summary>
            Set a matrix from a SbRotation
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.op_Explicit(OIV.Inventor.SbRotation)~OIV.Inventor.SbMatrix3">
            <summary>
            Set a matrix from a SbRotation
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.op_Multiply(OIV.Inventor.SbRotation,OIV.Inventor.SbRotation)">
            <summary>
            The multiplication operator (*). 
            Operated multiplication of two rotations; 
            results in product of rotations.
            </summary>
            <returns>Resulting rotation.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotation.MultVec(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Transform vector by the rotation.
            </overloads>
            <summary>
            Multiplies the given vector by the matrix of this rotation.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.MultVec(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Multiplies the given vector by the matrix of this rotation.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Mult(OIV.Inventor.SbRotation@)">
            <overloads>
            Compose rotation.
            </overloads>
            <summary>
            Multiplies the matrix of this rotation by the rotation <paramref name="r"/>.
            </summary>
            <param name="r">Multiplicative rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Mult(OIV.Inventor.SbRotation)">
            <summary>
            Multiplies the matrix of this rotation by the rotation <paramref name="r"/>.
            </summary>
            <param name="r">Multiplicative rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.ScaleAngle(System.Single)">
            <summary>
            Keep the axis the same. Multiply the angle of rotation by 
            the amount <paramref name="scaleFactor"/>. 
            </summary>
            <param name="scaleFactor">Scale factor applied to angle.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Slerp(OIV.Inventor.SbRotation@,OIV.Inventor.SbRotation@,System.Single)">
            <overloads>
            Spherical linear interpolation.
            </overloads>
            <summary>
            Spherical linear interpolation: as <paramref name="t"/> goes from 0 to 1, 
            returned value goes from <paramref name="rot0"/> to <paramref name="rot1"/>.
            </summary>
            <param name="rot0">Start rotation.</param>
            <param name="rot1">End rotation.</param>
            <param name="t">Interpolation factor between [0,1].</param>
            <returns>Interpolated rotation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="t"/> t%lt;0 or t%gt;1.</exception>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Slerp(OIV.Inventor.SbRotation,OIV.Inventor.SbRotation,System.Single)">
            <summary>
            Spherical linear interpolation: as <paramref name="t"/> goes from 0 to 1, 
            returned value goes from <paramref name="rot0"/> to <paramref name="rot1"/>.
            </summary>
            <param name="rot0">Start rotation.</param>
            <param name="rot1">End rotation.</param>
            <param name="t">Interpolation factor between [0,1].</param>
            <returns>Interpolated rotation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="t"/> t%lt;0 or t%gt;1.</exception>
        </member>
        <member name="M:OIV.Inventor.SbRotation.Identity">
            <summary>
            Returns a null rotation.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbRotation.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbRotation"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the quaternion values of the rotation.</returns>
        </member>
        <member name="T:OIV.Inventor.SbRotationd">
            <summary>
            Class for representing a rotation (double precision). 
            <para>
            Object that stores a rotation using double precision values. 
            Although Open Inventor fields still store only single precision 
            values, for certain applications it is useful and convenient 
            to be able to store and manipulate double precision values, 
            for example, double precision coordinate data or values that 
            will be used for further computation. 
            </para>
            <para>There are several ways to specify a rotation: quaternion 
            (4 doubles, in the order x, y, z, w), 4x4 rotation matrix, or 
            axis and angle. All angles are in radians and all rotations 
            are right-handed.
            </para>
            </summary>
            <remarks>Rotations are stored internally as quaternions.</remarks>
            <seealso cref="T:OIV.Inventor.SbRotation"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(System.Double[])">
            <overloads>
            Constructor for rotation.
            </overloads>
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>
            The constructors that take four doubles 
            create a quaternion from those doubles (careful, this differs from the four 
            numbers in an axis/radian definition). 
            </remarks>
            <param name="v">Quaternion values of rotation.</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(System.Double[])"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>
            The constructors that take four doubles 
            create a quaternion from those doubles (careful, this differs from the four 
            numbers in an axis/radian definition). 
            </remarks>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(OIV.Inventor.SbMatrixd@)">
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>
            The matrix constructor requires a valid 
            rotation matrix.
            </remarks>
            <param name="m">Rotation matrix.</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbMatrixd)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(OIV.Inventor.SbMatrixd)">
            <summary>
            Constructor for rotation. 
            </summary>
            <remarks>
            The matrix constructor requires a valid 
            rotation matrix.
            </remarks>
            <param name="m">Rotation matrix.</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbMatrixd)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(OIV.Inventor.SbVec3d@,System.Double)">
            <summary>
            Constructor for rotation. The axis/radians constructor 
            creates a rotation of angle radians about the given axis.
            </summary>
            <param name="axis">Rotation axis.</param>
            <param name="radians">Rotation angle (radians).</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d,System.Double)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(OIV.Inventor.SbVec3d,System.Double)">
            <summary>
            Constructor for rotation. The axis/radians constructor 
            creates a rotation of angle radians about the given axis.
            </summary>
            <param name="axis">Rotation axis.</param>
            <param name="radians">Rotation angle (radians).</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d,System.Double)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <summary>
            Constructors for rotation. The rotate From/To constructor defines rotation 
            that rotates from one vector into another. The <paramref name="rotateFrom"/> 
            and <paramref name="rotateTo"/> vectors are normalized by the constructor 
            before calculating the rotation.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.#ctor(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Constructors for rotation. The rotate From/To constructor defines rotation 
            that rotates from one vector into another. The <paramref name="rotateFrom"/> 
            and <paramref name="rotateTo"/> vectors are normalized by the constructor 
            before calculating the rotation.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
            <seealso cref="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)"/>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.GetValue(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gives a quaternion representation of this rotation.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.GetValue(OIV.Inventor.SbVec3d@,System.Double@)">
            <summary>
            Gives an axis / angle representation of this rotation.
            </summary>
            <param name="axis">Output parameter for axis.</param>
            <param name="radians">Output parameter for angle (radians).</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.GetValue(OIV.Inventor.SbMatrix@)">
            <summary>
            Returns corresponding 4x4 rotation matrix.
            </summary>
            <param name="matrix">Matrix representation of this rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.GetValue(OIV.Inventor.SbMatrixd@)">
            <summary>
            Returns corresponding 4x4 rotation matrix.
            </summary>
            <param name="matrix">Matrix representation of this rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Invert">
            <summary>
            Changes a rotation to be its inverse.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Inverse">
            <summary>
            Returns the inverse of a rotation.
            </summary>
            <returns>Inverse rotation.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(System.Double[])">
            <overloads>
            Sets value of rotation.
            </overloads>
            <summary>
            Sets value of rotation from array of 4 components of a quaternion.
            </summary>
            <param name="q">Rotation's quaternion value.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets value of rotation from 4 individual components of a quaternion.
            </summary>
            <param name="q0">First quaternion's component value.</param>
            <param name="q1">Second quaternion's component value.</param>
            <param name="q2">Third quaternion's component value.</param>
            <param name="q3">Last quaternion's component value.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbMatrix@)">
            <summary>
            Sets value of rotation from a rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbMatrix)">
            <summary>
            Sets value of rotation from a rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbMatrixd@)">
            <summary>
            Sets value of rotation from a rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbMatrixd)">
            <summary>
            Sets value of rotation from a rotation matrix.
            </summary>
            <param name="m">Rotation matrix.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d@,System.Double)">
            <summary>
            Sets value of vector from 3D rotation axis vector and angle in radians.
            </summary>
            <param name="axis">Rotation axis.</param>
            <param name="radians">Rotation angle (radians value).</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d,System.Double)">
            <summary>
            Sets value of vector from 3D rotation axis vector and angle in radians.
            </summary>
            <param name="axis">Rotation axis.</param>
            <param name="radians">Rotation angle (radians value).</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <summary>
            Sets rotation to rotate one direction vector to another. The <paramref name="rotateFrom"/> 
            and @<paramref name="rotateTo"/> arguments are normalized before the rotation is calculated.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Sets rotation to rotate one direction vector to another. The <paramref name="rotateFrom"/> 
            and @<paramref name="rotateTo"/> arguments are normalized before the rotation is calculated.
            </summary>
            <param name="rotateFrom">Start vector.</param>
            <param name="rotateTo">End vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbRotation@)">
            <summary>
            Sets rotation from a single precision rotation.
            </summary>
            <param name="rotate">Rotation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.SetValue(OIV.Inventor.SbRotation)">
            <summary>
            Sets rotation from a single precision rotation.
            </summary>
            <param name="rotate">Rotation value.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.op_Equality(OIV.Inventor.SbRotationd,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.op_Inequality(OIV.Inventor.SbRotationd,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbRotationd"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Equals(System.Object,System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="o"/> is a <see cref="T:OIV.Inventor.SbRotationd"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.op_Explicit(OIV.Inventor.SbRotationd)~OIV.Inventor.SbMatrixd">
            <summary>
            Set a matrix from a SbRotationd
            </summary>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.op_Multiply(OIV.Inventor.SbRotationd,OIV.Inventor.SbRotationd)">
            <summary>
            The multiplication operator (*). 
            Operated multiplication of two rotations; 
            results in product of rotations.
            </summary>
            <returns>Resulting rotation.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.MultVec(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Transform vector by the rotation.
            </overloads>
            <summary>
            Multiplies the given vector by the matrix of this rotation.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.MultVec(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d@)">
            <summary>
            Multiplies the given vector by the matrix of this rotation.
            </summary>
            <param name="src">Source vector.</param>
            <param name="dst">Output vector to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Mult(OIV.Inventor.SbRotationd@)">
            <overloads>
            Compose rotation.
            </overloads>
            <summary>
            Multiplies the matrix of this rotation by the rotation <paramref name="r"/>.
            </summary>
            <param name="r">Multiplicative rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Mult(OIV.Inventor.SbRotationd)">
            <summary>
            Multiplies the matrix of this rotation by the rotation <paramref name="r"/>.
            </summary>
            <param name="r">Multiplicative rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.ScaleAngle(System.Double)">
            <summary>
            Keep the axis the same. Multiply the angle of rotation by 
            the amount <paramref name="scaleFactor"/>. 
            </summary>
            <param name="scaleFactor">Scale factor applied to angle.</param>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Slerp(OIV.Inventor.SbRotationd@,OIV.Inventor.SbRotationd@,System.Double)">
            <overloads>
            Spherical linear interpolation.
            </overloads>
            <summary>
            Spherical linear interpolation: as <paramref name="t"/> goes from 0 to 1, 
            returned value goes from <paramref name="rot0"/> to <paramref name="rot1"/>.
            </summary>
            <param name="rot0">Start rotation.</param>
            <param name="rot1">End rotation.</param>
            <param name="t">Interpolation factor between [0,1].</param>
            <returns>Interpolated rotation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="t"/> t%lt;0 or t%gt;1.</exception>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Slerp(OIV.Inventor.SbRotationd,OIV.Inventor.SbRotationd,System.Double)">
            <summary>
            Spherical linear interpolation: as <paramref name="t"/> goes from 0 to 1, 
            returned value goes from <paramref name="rot0"/> to <paramref name="rot1"/>.
            </summary>
            <param name="rot0">Start rotation.</param>
            <param name="rot1">End rotation.</param>
            <param name="t">Interpolation factor between [0,1].</param>
            <returns>Interpolated rotation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="t"/> t%lt;0 or t%gt;1.</exception>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.Identity">
            <summary>
            Returns a null (identity) rotation.
            </summary>
            <returns>Indentity rotation.</returns>
        </member>
        <member name="M:OIV.Inventor.SbRotationd.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbRotationd"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the quaternion values of the rotation.</returns>
        </member>
        <member name="T:OIV.Inventor.SbVec2d">
            <summary>
            2D vector class (double precision). 
            <para>
            2D vector class used to store 2D vectors and points using double precision values. 
            Although Open Inventor fields still store only single precision values, for certain applications 
            it is useful and convenient to be able to store and manipulate double precision values, 
            for example, double precision coordinate data or values that will be used for further computation. 
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2d.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec2d"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2d.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec2d"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.#ctor(System.Double[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xy"> vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.#ctor(System.Double,System.Double)">
            <summary>
            Constructor given vector components <paramref name="x"/> and <paramref name="y"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.#ctor(System.Double)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for x and y component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Dot(OIV.Inventor.SbVec2d@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Dot(OIV.Inventor.SbVec2d)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.GetValue(System.Double@,System.Double@)">
            <summary>
            Gets the vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Length">
            <summary>
            Computes geometric length of vector.
            </summary>
            <returns>Length of vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Normalize">
            <summary>
            Changes vector to be unit length, returning the length before normalization.
            </summary>
            <returns>The length before normalization.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.SetValue(System.Double[])">
            <summary>
            Sets the vector components.
            </summary>
            <param name="v">Array of vector components.</param>
            <exception cref="T:System.ArgumentException">If array size mismatch num components.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.SetValue(System.Double,System.Double)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.SetValue(OIV.Inventor.SbVec2f@)">
            <overloads>
            Sets value of vector from a single precision vector.
            </overloads>
            <summary>
            Sets value of vector from a single precision vector.
            </summary>
            <param name="vec2f">single precison vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.SetValue(OIV.Inventor.SbVec2f)">
            <summary>
            Sets value of vector from a single precision vector.
            </summary>
            <param name="vec2f">single precison vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Equals(System.Object,System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec2d"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec2d"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec2d"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XY component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Equality(OIV.Inventor.SbVec2d,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Inequality(OIV.Inventor.SbVec2d,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Subtraction(OIV.Inventor.SbVec2d,OIV.Inventor.SbVec2d)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_UnaryNegation(OIV.Inventor.SbVec2d)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Addition(OIV.Inventor.SbVec2d,OIV.Inventor.SbVec2d)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Multiply(OIV.Inventor.SbVec2d,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Multiply(System.Double,OIV.Inventor.SbVec2d)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.op_Division(OIV.Inventor.SbVec2d,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2d.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec2d value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec2d.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec2d.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec2d.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec2f">
            <summary>
            2D vector class used to store 2D vectors and points. 
            This class is used throughout Open Inventor for arguments and return values
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2f.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec2f"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2f.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec2f"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.#ctor(System.Single[])">
            <summary>
            Constructor given vector components. <see cref="M:OIV.Inventor.SbVec3f.SetValue(System.Single[])"/>
            </summary>
            <param name="xy">Array containing vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.#ctor(System.Single,System.Single)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.#ctor(System.Single)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">Value for each vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Dot(OIV.Inventor.SbVec2f@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Dot(OIV.Inventor.SbVec2f)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.GetValue(System.Single@,System.Single@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Length">
            <summary>
            Computes geometric length of vector.
            </summary>
            <returns>Geometric length of vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Normalize">
            <summary>
            Changes vector to be unit length, returning the length before normalization.
            </summary>
            <returns>Length before normalization.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.SetValue(System.Single[])">
            <summary>
            Sets the vector components giving an array of 2 float.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 2.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.SetValue(System.Single,System.Single)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.SetValue(System.Double[])">
            <summary>
            Sets the vector components giving an array of 2 double.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 2.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.SetValue(System.Double,System.Double)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.SetValue(OIV.Inventor.SbVec2d@)">
            <overloads>
            Sets value of vector from a double precision vector.
            </overloads>
            <summary>
            Sets value of vector from a double precision vector.
            </summary>
            <param name="vec2d">Double precision vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.SetValue(OIV.Inventor.SbVec2d)">
            <summary>
            Sets value of vector from a double precision vector.
            </summary>
            <param name="vec2d">Double precision vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Equals(System.Object,System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec2f"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec2f"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec2f"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XY component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Equality(OIV.Inventor.SbVec2f,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Inequality(OIV.Inventor.SbVec2f,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Subtraction(OIV.Inventor.SbVec2f,OIV.Inventor.SbVec2f)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_UnaryNegation(OIV.Inventor.SbVec2f)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Addition(OIV.Inventor.SbVec2f,OIV.Inventor.SbVec2f)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Multiply(OIV.Inventor.SbVec2f,System.Single)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Multiply(System.Single,OIV.Inventor.SbVec2f)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.op_Division(OIV.Inventor.SbVec2f,System.Single)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2f.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec2f value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec2f.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec2f.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec2f.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec2i32">
            <summary>
            2D vector class used to store 2D vectors and points. 
            <para> 
            This class is used throughout Open Inventor for arguments and return values
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2i32.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec2i32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2i32.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec2i32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.#ctor(System.Int32[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xy"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component.</param>
            <param name="y">y component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.#ctor(System.Int32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for x and y component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.Dot(OIV.Inventor.SbVec2i32@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.Dot(OIV.Inventor.SbVec2i32)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.GetValue(System.Int32@,System.Int32@)">
            <summary>
            Gets the vector component.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.SetValue(System.Int32[])">
            <summary>
            Sets the vector components giving an array of 2 integers.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 2.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.SetValue(System.Int32,System.Int32)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec2i32"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec2i32"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XY component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Equality(OIV.Inventor.SbVec2i32,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Inequality(OIV.Inventor.SbVec2i32,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Subtraction(OIV.Inventor.SbVec2i32,OIV.Inventor.SbVec2i32)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_UnaryNegation(OIV.Inventor.SbVec2i32)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Addition(OIV.Inventor.SbVec2i32,OIV.Inventor.SbVec2i32)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Multiply(OIV.Inventor.SbVec2i32,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Multiply(System.Int32,OIV.Inventor.SbVec2i32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Multiply(OIV.Inventor.SbVec2i32,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Multiply(System.Double,OIV.Inventor.SbVec2i32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Division(OIV.Inventor.SbVec2i32,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.op_Division(OIV.Inventor.SbVec2i32,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2i32.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec2i32 value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec2i32.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec2i32.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec2i32.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec2s">
            <summary>
            2D vector class used to store 2D integer vectors and points. 
            <para>
            This class is used throughout Open Inventor for arguments and return values.
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2s.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec2s"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec2s.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec2s"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.#ctor(System.Int16[])">
            <summary>
            Constructor given vector components
            </summary>
            <param name="xy"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructor given vector components
            </summary>
            <param name="x">x component.</param>
            <param name="y">y component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.#ctor(System.Int16)">
            <summary>
            Constructor given vector components
            </summary>
            <param name="val">value for x and y component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.Dot(OIV.Inventor.SbVec2s@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.Dot(OIV.Inventor.SbVec2s)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.GetValue(System.Int16@,System.Int16@)">
            <summary>
            Gets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.SetValue(System.Int16[])">
            <summary>
            Sets the vector components giving an array of 2 short.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 2.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.SetValue(System.Int16,System.Int16)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec2s"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec2s"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XY component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Equality(OIV.Inventor.SbVec2s,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Inequality(OIV.Inventor.SbVec2s,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Subtraction(OIV.Inventor.SbVec2s,OIV.Inventor.SbVec2s)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_UnaryNegation(OIV.Inventor.SbVec2s)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Addition(OIV.Inventor.SbVec2s,OIV.Inventor.SbVec2s)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Multiply(OIV.Inventor.SbVec2s,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Multiply(System.Int32,OIV.Inventor.SbVec2s)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Multiply(OIV.Inventor.SbVec2s,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Multiply(System.Double,OIV.Inventor.SbVec2s)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Division(OIV.Inventor.SbVec2s,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.op_Division(OIV.Inventor.SbVec2s,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec2s.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec2s value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec2s.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec2s.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec2s.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec3f">
            <summary>
            3D vector class. 
            <para>
            3D vector class used to store 3D vectors and points. 
            This class is used throughout Open Inventor for arguments 
            and return values. 
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3f.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec3f"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3f.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec3f"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.#ctor(System.Single[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyz"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">value for x component.</param>
            <param name="y">value for y component.</param>
            <param name="z">value for z component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.#ctor(System.Single)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.#ctor(OIV.Inventor.SbPlane@,OIV.Inventor.SbPlane@,OIV.Inventor.SbPlane@)">
            <overloads>Constructor given 3 plane.</overloads>
            /// <summary>
            Constructor given 3 plane <paramref name="p0"/> <paramref name="p1"/> <paramref name="p2"/>. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.#ctor(OIV.Inventor.SbPlane,OIV.Inventor.SbPlane,OIV.Inventor.SbPlane)">
            <summary>
            Constructor given 3 plane <paramref name="p0"/> <paramref name="p1"/> <paramref name="p2"/>. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Cross(OIV.Inventor.SbVec3f@)">
            <overloads>
            Returns right-handed cross product of vector and another vector.
            </overloads>
            <summary>
            Returns right-handed cross product of vector and another vector.
            </summary>
            <returns>Right-handed cross product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Cross(OIV.Inventor.SbVec3f)">
            <summary>
            Returns right-handed cross product of vector and another vector.
            </summary>
            <returns>Right-handed cross product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Dot(OIV.Inventor.SbVec3f@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Dot(OIV.Inventor.SbVec3f)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.GetValue(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
            <param name="z">Z vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Length">
            <summary>
            Computes geometric length of vector.
            </summary>
            <returns>Geometric length of vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Normalize">
            <summary>
            Changes vector to be unit length, returning the length before normalization.
            </summary>
            <returns>Length before normalization.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(System.Single[])">
            <summary>
            Sets the vector components giving an array of 3 float.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">x vector component.</param>
            <param name="y">y vector component.</param>
            <param name="z">z vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(System.Double[])">
            <summary>
            Sets the vector components giving an array of 3 double.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(System.Double,System.Double,System.Double)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">x vector component.</param>
            <param name="y">y vector component.</param>
            <param name="z">z vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Sets value of vector as the weighted average of 3 other vectors.
            </overloads>
            <summary>
            Sets value of vector as the weighted average of 3 other vectors.
            </summary>
            <remarks>
            <code>
            this = v0 * barycentic[0] + v1 * barycentic[1] + v2 * barycentic[2];
            </code>
            </remarks>
            <param name="barycentic">Weight vector.</param>
            <param name="v0">First input vector.</param>
            <param name="v1">Second input vector.</param>
            <param name="v2">Third input vector.</param>
            <returns>this vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Sets value of vector as the weighted average of 3 other vectors.
            </summary>
            <remarks>
            <code>
            this = v0 * barycentic[0] + v1 * barycentic[1] + v2 * barycentic[2];
            </code>
            </remarks>
            <param name="barycentic">Weight vector.</param>
            <param name="v0">First input vector.</param>
            <param name="v1">Second input vector.</param>
            <param name="v2">Third input vector.</param>
            <returns>this vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(OIV.Inventor.SbVec3d@)">
            <overloads>
            Sets value of vector from a double precision vector.
            </overloads>
            <summary>
            Sets value of vector from a double precision vector.
            </summary>
            <param name="vec3d">Double value vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.SetValue(OIV.Inventor.SbVec3d)">
            <summary>
            Sets value of vector from a double precision vector.
            </summary>
            <param name="vec3d">Double value vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.GetClosestAxis">
            <summary>
            Returns principal axis that is closest 
            (based on maximum dot product) to this vector.
            </summary>
            <returns>Closest principal axis.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Equals(System.Object,System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec3f"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec3f"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec3f"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZ component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Equality(OIV.Inventor.SbVec3f,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Inequality(OIV.Inventor.SbVec3f,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Subtraction(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_UnaryNegation(OIV.Inventor.SbVec3f)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Addition(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Multiply(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            The multiplication operator (*), which multiply each component of 
            <paramref name="v1"/> by each component of vector <paramref name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Multiply(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Multiply(System.Single,OIV.Inventor.SbVec3f)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Division(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by components of vector <paramref name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If one of component's vector 
            <paramref name="v2"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.op_Division(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3f.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec3f value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec3f.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec3f.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3f.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3f.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec3d">
            <summary>
            3D vector class (double precision).
            <para>
            3D vector class used to store 3D vectors and points. 
            Although Open Inventor fields still store only single precision values, 
            for certain applications it is useful and convenient to be able 
            to store and manipulate double precision values, 
            for example, double precision coordinate data or values 
            that will be used for further computation. 
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3d.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec3d"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3d.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec3d"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.#ctor(System.Double[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyz"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">value for x component.</param>
            <param name="y">value for y component.</param>
            <param name="z">value for z component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.#ctor(System.Double)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.#ctor(OIV.Inventor.SbPlane@,OIV.Inventor.SbPlane@,OIV.Inventor.SbPlane@)">
            <overloads>
            Constructor given 3 plane.
            </overloads>
            <summary>
            Constructor given 3 plane <paramref name="p0"/> <paramref name="p1"/> <paramref name="p2"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.#ctor(OIV.Inventor.SbPlane,OIV.Inventor.SbPlane,OIV.Inventor.SbPlane)">
            <summary>
            Constructor given 3 plane <paramref name="p0"/> <paramref name="p1"/> <paramref name="p2"/>.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Cross(OIV.Inventor.SbVec3d@)">
            <overloads>
            Returns right-handed cross product of vector and another vector.
            </overloads>
            <summary>
            Returns right-handed cross product of vector and another vector.
            </summary>
            <returns>Right-handed cross product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Cross(OIV.Inventor.SbVec3d)">
            <summary>
            Returns right-handed cross product of vector and another vector.
            </summary>
            <returns>Right-handed cross product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Dot(OIV.Inventor.SbVec3d@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Dot(OIV.Inventor.SbVec3d)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.GetValue(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Length">
            <summary>
            Computes geometric length of vector.
            </summary>
            <returns>Length of vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Normalize">
            <summary>
            Changes vector to be unit length, returning the length before normalization.
            </summary>
            <returns>The length before normalization.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.SetValue(System.Double[])">
            <summary>
            Sets the vector components giving an array of 3 double.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.SetValue(System.Double,System.Double,System.Double)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.SetValue(OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@,OIV.Inventor.SbVec3d@)">
            <overloads>
            Sets value of vector as the weighted average of 3 other vectors.
            </overloads>
            <summary>
            Sets value of vector as the weighted average of 3 other vectors.
            </summary>
            <remarks>
            <code>
            this = v0 * barycentic[0] + v1 * barycentic[1] + v2 * barycentic[2];
            </code>
            </remarks>
            <param name="barycentic">Weight vector.</param>
            <param name="v0">First input vector.</param>
            <param name="v1">Second input vector.</param>
            <param name="v2">Third input vector.</param>
            <returns>this vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.SetValue(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Sets value of vector as the weighted average of 3 other vectors.
            </summary>
            <remarks>
            <code>
            this = v0 * barycentic[0] + v1 * barycentic[1] + v2 * barycentic[2];
            </code>
            </remarks>
            <param name="barycentic">Weight vector.</param>
            <param name="v0">First input vector.</param>
            <param name="v1">Second input vector.</param>
            <param name="v2">Third input vector.</param>
            <returns>this vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.SetValue(OIV.Inventor.SbVec3f@)">
            <overloads>
            Sets value of vector from a single precision vector.
            </overloads>
            <summary>
            Sets value of vector from a single precision vector.
            </summary>
            <param name="vec3f">Single precision vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.SetValue(OIV.Inventor.SbVec3f)">
            <summary>
            Sets value of vector from a single precision vector.
            </summary>
            <param name="vec3f">Single precision vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.GetClosestAxis">
            <summary>
            Returns principal axis that is closest 
            (based on maximum dot product) to this vector.
            </summary>
            <returns>Closest principal axis.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Equals(System.Object,System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec3d"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec3d"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec3d"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZ component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Equality(OIV.Inventor.SbVec3d,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Inequality(OIV.Inventor.SbVec3d,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Subtraction(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_UnaryNegation(OIV.Inventor.SbVec3d)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Addition(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Multiply(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            The multiplication operator (*), which multiply each component of 
            <paramref name="v1"/> by each component of vector <paramref name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Multiply(OIV.Inventor.SbVec3d,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Multiply(System.Double,OIV.Inventor.SbVec3d)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Division(OIV.Inventor.SbVec3d,OIV.Inventor.SbVec3d)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by components of vector <paramref name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If one of component's vector 
            <paramref name="v2"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.op_Division(OIV.Inventor.SbVec3d,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3d.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec3d value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec3d.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec3d.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3d.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3d.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec3i32">
            <summary>
            3D vector class. 
            <para>
            3D vector class used to store 3D vectors and points. 
            This class is used throughout Open Inventor for arguments and return values.
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3i32.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec3i32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3i32.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec3i32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.#ctor(System.Int32[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyz">vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component.</param>
            <param name="y">y component.</param>
            <param name="z">z component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.#ctor(System.Int32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.#ctor(OIV.Inventor.SbVec3s@)">
            <overloads>
            Constructor given vector components.
            </overloads>
            <summary>
            Constructor given vector components.
            </summary>
            <param name="vec">source vector of type <see cref="T:OIV.Inventor.SbVec3s"/>.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.#ctor(OIV.Inventor.SbVec3s)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="vec">source vector of type <see cref="T:OIV.Inventor.SbVec3s"/>.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.Dot(OIV.Inventor.SbVec3i32@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.Dot(OIV.Inventor.SbVec3i32)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.GetValue(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.SetValue(System.Int32[])">
            <summary>
            Sets the vector components giving an array of 3 integers.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.SetValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.SetValue(OIV.Inventor.SbVec3s@)">
            <overloads>
            Sets value of vector from a short vector.
            </overloads>
            <summary>
            Sets value of vector from a short vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.SetValue(OIV.Inventor.SbVec3s)">
            <summary>
            Sets value of vector from a short vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.GetMaxComponent">
            <summary>
            Gives the max component of the vector.
            </summary>
            <returns>Max of x,y and z.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec3i32"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec3i32"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZ component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Equality(OIV.Inventor.SbVec3i32,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Inequality(OIV.Inventor.SbVec3i32,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Subtraction(OIV.Inventor.SbVec3i32,OIV.Inventor.SbVec3i32)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_UnaryNegation(OIV.Inventor.SbVec3i32)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Addition(OIV.Inventor.SbVec3i32,OIV.Inventor.SbVec3i32)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Multiply(OIV.Inventor.SbVec3i32,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Multiply(System.Int32,OIV.Inventor.SbVec3i32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Multiply(OIV.Inventor.SbVec3i32,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Multiply(System.Double,OIV.Inventor.SbVec3i32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Division(OIV.Inventor.SbVec3i32,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.op_Division(OIV.Inventor.SbVec3i32,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3i32.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec3i32 value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec3i32.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec3i32.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3i32.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3i32.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec3s">
            <summary>
            3D vector class. 
            <para>
            3D vector class used to store 3D integer vectors and points. 
            This class is used throughout Open Inventor for arguments 
            and return values. 
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3s.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec3s"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec3s.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec3s"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.#ctor(System.Int16[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyz">vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component.</param>
            <param name="y">y component.</param>
            <param name="z">z component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.#ctor(System.Int16)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">valeu for each vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.#ctor(OIV.Inventor.SbVec3i32@)">
            <overloads>
            Constructor given vector components.
            </overloads>
            <summary>
            Constructor given vector components.
            </summary>
            <param name="vec">source vector of type <see cref="T:OIV.Inventor.SbVec3i32"/>.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.#ctor(OIV.Inventor.SbVec3i32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="vec">source vector of type <see cref="T:OIV.Inventor.SbVec3i32"/>.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.Dot(OIV.Inventor.SbVec3s@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.Dot(OIV.Inventor.SbVec3s)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.GetValue(System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.SetValue(System.Int16[])">
            <summary>
            Sets the vector components giving an array of 3 short.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.SetValue(System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.SetValue(OIV.Inventor.SbVec3i32@)">
            <overloads>
            Sets value of vector from an integer vector.
            </overloads>
            <summary>
            Sets value of vector from an integer vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.SetValue(OIV.Inventor.SbVec3i32)">
            <summary>
            Sets value of vector from an integer vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.GetMaxComponent">
            <summary>
            Gives the max component of the vector.
            </summary>
            <returns>Max of x,y and z.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec3s"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec3s"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZ component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Equality(OIV.Inventor.SbVec3s,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Inequality(OIV.Inventor.SbVec3s,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Subtraction(OIV.Inventor.SbVec3s,OIV.Inventor.SbVec3s)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_UnaryNegation(OIV.Inventor.SbVec3s)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Addition(OIV.Inventor.SbVec3s,OIV.Inventor.SbVec3s)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Multiply(OIV.Inventor.SbVec3s,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Multiply(System.Int32,OIV.Inventor.SbVec3s)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Multiply(OIV.Inventor.SbVec3s,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Multiply(System.Double,OIV.Inventor.SbVec3s)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Division(OIV.Inventor.SbVec3s,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.op_Division(OIV.Inventor.SbVec3s,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec3s.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec3s value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec3s.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec3s.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3s.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec3s.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4f">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store homogeneous coordinates. 
            This class is used in Open Inventor for arguments and return values.
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4f.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4f"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4f.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4f"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.#ctor(System.Single[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.#ctor(System.Single)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Dot(OIV.Inventor.SbVec4f@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Dot(OIV.Inventor.SbVec4f)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.GetReal(OIV.Inventor.SbVec4f@)">
            <summary>
            Returns the real portion of the vector by dividing by the fourth value. 
            </summary>
            <param name="v">output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.GetValue(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Length">
            <summary>
            Computes geometric length of vector.
            </summary>
            <returns>Length of vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Normalize">
            <summary>
            Changes vector to be unit length, returning the length before normalization.
            </summary>
            <returns>The length before normalization.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.SetValue(System.Single[])">
            <summary>
            Sets the vector components giving an array of 3 float.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.SetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.SetValue(System.Double[])">
            <summary>
            Sets the vector components giving an array of 3 double.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 3.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.SetValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.SetValue(OIV.Inventor.SbVec4d@)">
            <overloads>
            Sets value of vector from a double precision vector.
            </overloads>
            <summary>
            Sets value of vector from a double precision vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.SetValue(OIV.Inventor.SbVec4d)">
            <summary>
            Sets value of vector from a double precision vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Equals(System.Object,System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4f"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4f"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4f"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Equality(OIV.Inventor.SbVec4f,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Inequality(OIV.Inventor.SbVec4f,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Subtraction(OIV.Inventor.SbVec4f,OIV.Inventor.SbVec4f)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_UnaryNegation(OIV.Inventor.SbVec4f)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Addition(OIV.Inventor.SbVec4f,OIV.Inventor.SbVec4f)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Multiply(OIV.Inventor.SbVec4f,OIV.Inventor.SbVec4f)">
            <summary>
            The multiplication operator (*), which multiply each component of 
            <param name="v1"/> by each component of vector <param name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Multiply(OIV.Inventor.SbVec4f,System.Single)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Multiply(System.Single,OIV.Inventor.SbVec4f)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Division(OIV.Inventor.SbVec4f,OIV.Inventor.SbVec4f)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by components of vector <paramref name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If one of component's vector 
            <paramref name="v2"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.op_Division(OIV.Inventor.SbVec4f,System.Single)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4f.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4f value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4f.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4f.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4f.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4f.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4f.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4d">
            <summary>
            4D vector class (double precision).
            <para>
            4D vector class used to store homogeneous coordinates. 
            Although Open Inventor fields still store only single precision values, 
            for certain applications it is useful and convenient to be able to 
            store and manipulate double precision values, for example, 
            double precision coordinate data or values that will be used 
            for further computation
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4d.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4d"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4d.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4d"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.#ctor(System.Double[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyzw">vector components.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.#ctor(System.Double)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Dot(OIV.Inventor.SbVec4d@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Dot(OIV.Inventor.SbVec4d)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.GetReal(OIV.Inventor.SbVec3d@)">
            <summary>
            Returns the real portion of the vector by dividing by the fourth value. 
            </summary>
            <param name="v">output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.GetValue(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Length">
            <summary>
            Computes geometric length of vector.
            </summary>
            <returns>Length of vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Normalize">
            <summary>
            Changes vector to be unit length, returning the length before normalization.
            </summary>
            <returns>The length before normalization.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.SetValue(System.Double[])">
            <summary>
            Sets the vector components giving an array of 4 double.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.SetValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.SetValue(OIV.Inventor.SbVec4f@)">
            <overloads>
            Sets value of vector from a single precision vector.
            </overloads>
            <summary>
            Sets value of vector from a single precision vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.SetValue(OIV.Inventor.SbVec4f)">
            <summary>
            Sets value of vector from a single precision vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Equals(System.Object,System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4d"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4d"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4d"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Equality(OIV.Inventor.SbVec4d,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Inequality(OIV.Inventor.SbVec4d,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Subtraction(OIV.Inventor.SbVec4d,OIV.Inventor.SbVec4d)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_UnaryNegation(OIV.Inventor.SbVec4d)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <param name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Addition(OIV.Inventor.SbVec4d,OIV.Inventor.SbVec4d)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Multiply(OIV.Inventor.SbVec4d,OIV.Inventor.SbVec4d)">
            <summary>
            The multiplication operator (*), which multiply each component of 
            <param name="v1"/> by each component of vector <param name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Multiply(OIV.Inventor.SbVec4d,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Multiply(System.Double,OIV.Inventor.SbVec4d)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Division(OIV.Inventor.SbVec4d,OIV.Inventor.SbVec4d)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by components of vector <paramref name="v2"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If one of component's vector 
            <paramref name="v2"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.op_Division(OIV.Inventor.SbVec4d,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4d.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4d value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4d.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4d.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4d.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4d.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4d.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4i32">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store 4D vectors and points. 
            This class is used throughout Open Inventor for arguments 
            and return values
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4i32.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4i32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4i32.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4i32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.#ctor(System.Int32[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.#ctor(System.Int32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.Dot(OIV.Inventor.SbVec4i32@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.Dot(OIV.Inventor.SbVec4i32)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.GetValue(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.SetValue(System.Int32[])">
            <summary>
            Sets the vector components giving an array of 4 integer.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.SetValue(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4i32"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4i32"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Equality(OIV.Inventor.SbVec4i32,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Inequality(OIV.Inventor.SbVec4i32,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Subtraction(OIV.Inventor.SbVec4i32,OIV.Inventor.SbVec4i32)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_UnaryNegation(OIV.Inventor.SbVec4i32)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Addition(OIV.Inventor.SbVec4i32,OIV.Inventor.SbVec4i32)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Multiply(OIV.Inventor.SbVec4i32,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Multiply(System.Int32,OIV.Inventor.SbVec4i32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Multiply(OIV.Inventor.SbVec4i32,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Multiply(System.Double,OIV.Inventor.SbVec4i32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Division(OIV.Inventor.SbVec4i32,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.op_Division(OIV.Inventor.SbVec4i32,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4i32.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4i32 value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4i32.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4i32.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4i32.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4i32.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4i32.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4s">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store 4D integer vectors and points. 
            This class is used throughout Open Inventor for arguments and return values
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4s.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4s"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4s.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4s"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.#ctor(System.Int16[])">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.#ctor(System.Int16)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.Dot(OIV.Inventor.SbVec4s@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.Dot(OIV.Inventor.SbVec4s)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.GetValue(System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.SetValue(System.Int16[])">
            <summary>
            Sets the vector components giving an array of 4 short.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.SetValue(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4s"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4s"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Equality(OIV.Inventor.SbVec4s,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Inequality(OIV.Inventor.SbVec4s,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Subtraction(OIV.Inventor.SbVec4s,OIV.Inventor.SbVec4s)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_UnaryNegation(OIV.Inventor.SbVec4s)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Addition(OIV.Inventor.SbVec4s,OIV.Inventor.SbVec4s)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Multiply(OIV.Inventor.SbVec4s,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Multiply(System.Int32,OIV.Inventor.SbVec4s)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Multiply(OIV.Inventor.SbVec4s,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Multiply(System.Double,OIV.Inventor.SbVec4s)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Division(OIV.Inventor.SbVec4s,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.op_Division(OIV.Inventor.SbVec4s,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4s.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4s value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4s.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4s.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4s.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4s.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4s.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4ub">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store 4D integer vectors and points. 
            This class is used throughout Open Inventor for arguments and return values.
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4ub.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4ub"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4ub.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4ub"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.#ctor(System.Byte[])">
            <summary>
            Constructor given vector components
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.#ctor(System.Byte)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.Dot(OIV.Inventor.SbVec4ub@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.Dot(OIV.Inventor.SbVec4ub)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.GetValue(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.SetValue(System.Byte[])">
            <summary>
            Sets the vector components giving an array of 4 byte.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.SetValue(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4ub"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4ub"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Equality(OIV.Inventor.SbVec4ub,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Inequality(OIV.Inventor.SbVec4ub,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Subtraction(OIV.Inventor.SbVec4ub,OIV.Inventor.SbVec4ub)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Addition(OIV.Inventor.SbVec4ub,OIV.Inventor.SbVec4ub)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Multiply(OIV.Inventor.SbVec4ub,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Multiply(System.Int32,OIV.Inventor.SbVec4ub)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Multiply(OIV.Inventor.SbVec4ub,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Multiply(System.Double,OIV.Inventor.SbVec4ub)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Division(OIV.Inventor.SbVec4ub,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.op_Division(OIV.Inventor.SbVec4ub,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4ub.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4ub value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4ub.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4ub.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4ub.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4ub.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4ub.W">
            <summary>
            W component of vector.
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbVec4ui32">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store 4D integer vectors and points. 
            This class is used throughout Open Inventor for arguments and return values. 
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4ui32.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4ui32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4ui32.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4ui32"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.#ctor(System.UInt32[])">
            <summary>
            Constructor given vector components
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.#ctor(System.UInt32)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.Dot(OIV.Inventor.SbVec4ui32@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.Dot(OIV.Inventor.SbVec4ui32)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.GetValue(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.SetValue(System.UInt32[])">
            <summary>
            Sets the vector components giving an array of 4 unsigned integer.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.SetValue(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4ui32"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4ui32"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Equality(OIV.Inventor.SbVec4ui32,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Inequality(OIV.Inventor.SbVec4ui32,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Subtraction(OIV.Inventor.SbVec4ui32,OIV.Inventor.SbVec4ui32)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Addition(OIV.Inventor.SbVec4ui32,OIV.Inventor.SbVec4ui32)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Multiply(OIV.Inventor.SbVec4ui32,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Multiply(System.Int32,OIV.Inventor.SbVec4ui32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Multiply(OIV.Inventor.SbVec4ui32,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Multiply(System.Double,OIV.Inventor.SbVec4ui32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Division(OIV.Inventor.SbVec4ui32,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.op_Division(OIV.Inventor.SbVec4ui32,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4ui32.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4ui32 value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4ui32.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4ui32.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4ui32.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4ui32.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4ui32.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4us">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store 4D integer vectors and points. 
            This class is used throughout Open Inventor for arguments and return values.
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4us.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4us"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4us.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4us"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.#ctor(System.UInt16[])">
            <summary>
            Constructor given vector components
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.#ctor(System.UInt16)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.Dot(OIV.Inventor.SbVec4us@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.Dot(OIV.Inventor.SbVec4us)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.GetValue(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.SetValue(System.UInt16[])">
            <summary>
            Sets the vector components giving an array of 4 unsigned short.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.SetValue(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Sets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4us"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4us"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Equality(OIV.Inventor.SbVec4us,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Inequality(OIV.Inventor.SbVec4us,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Subtraction(OIV.Inventor.SbVec4us,OIV.Inventor.SbVec4us)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Addition(OIV.Inventor.SbVec4us,OIV.Inventor.SbVec4us)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Multiply(OIV.Inventor.SbVec4us,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Multiply(System.Int32,OIV.Inventor.SbVec4us)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Multiply(OIV.Inventor.SbVec4us,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Multiply(System.Double,OIV.Inventor.SbVec4us)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Division(OIV.Inventor.SbVec4us,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.op_Division(OIV.Inventor.SbVec4us,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4us.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4us value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4us.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4us.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4us.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4us.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4us.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbVec4b">
            <summary>
            4D vector class. 
            <para>
            4D vector class used to store 4D integer vectors and points. 
            This class is used throughout Open Inventor for arguments and return values.
            </para>
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4b.MinValue">
            <summary>
            Represents the smallest possible value of <seealso cref="T:OIV.Inventor.SbVec4b"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbVec4b.MaxValue">
            <summary>
            Represents the largest possible value of <seealso cref="T:OIV.Inventor.SbVec4b"/>. 
            This field is constant. 
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.#ctor(System.SByte[])">
            <summary>
            Constructor given vector components
            </summary>
            <param name="xyzw"> vector components </param>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="x">x component of vector.</param>
            <param name="y">y component of vector.</param>
            <param name="z">z component of vector.</param>
            <param name="w">w component of vector.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.#ctor(System.SByte)">
            <summary>
            Constructor given vector components.
            </summary>
            <param name="val">value for each vector's component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.ToArray">
            <summary>
            Returns an array representation of vector components.
            </summary>
            <returns>An array containing vector components.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.Dot(OIV.Inventor.SbVec4b@)">
            <overloads>
            Compute dot (inner) product.
            </overloads>
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.Dot(OIV.Inventor.SbVec4b)">
            <summary>
            Compute dot (inner) product of vector with <paramref name="v"/> vector.
            </summary>
            <returns>Value of dot product.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.GetValue(System.SByte@,System.SByte@,System.SByte@,System.SByte@)">
            <summary>
            Gets the vector components.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.Negate">
            <summary>
            Negates each component of this vector.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.SetValue(System.SByte[])">
            <summary>
            Sets the vector components giving an array of 4 signed byte.
            </summary>
            <param name="v">Vector components.</param>
            <exception cref="T:System.ArgumentException">If array length differs from 4.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.SetValue(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Sets the vector components.
            </summary>
            <param name="x">X vector component.</param>
            <param name="y">Y vector component.</param>
            <param name="z">Z vector component.</param>
            <param name="w">W vector component.</param>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbVec4b"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.ToString">
            <summary>
            Converts this <see cref="T:OIV.Inventor.SbVec4b"/> structure to a human readable string.
            </summary>
            <returns>A string that consists of the XYZW component values.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Equality(OIV.Inventor.SbVec4b,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Inequality(OIV.Inventor.SbVec4b,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Subtraction(OIV.Inventor.SbVec4b,OIV.Inventor.SbVec4b)">
            <summary>
            Subtraction (–) operator. Performs the difference between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Difference between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_UnaryNegation(OIV.Inventor.SbVec4b)">
            <summary>
            The unary negation operator (-). Negates each vector component.
            </summary>
            <returns>The negative of <paramref name="v1"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Addition(OIV.Inventor.SbVec4b,OIV.Inventor.SbVec4b)">
            <summary>
            Additive (+) operator. Performs the addition between the vectors <paramref name="v1"/> 
            and <paramref name="v2"/>.
            </summary>
            <returns>Addition between the two vectors.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Multiply(OIV.Inventor.SbVec4b,System.Int32)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Multiply(System.Int32,OIV.Inventor.SbVec4b)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Multiply(OIV.Inventor.SbVec4b,System.Double)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Multiply(System.Double,OIV.Inventor.SbVec4b)">
            <summary>
            The multiplication operator (*), which applies on each component of 
            <paramref name="v1"/> the <paramref name="d"/> multiplicative factor.
            </summary>
            <returns>Resulting vector.</returns>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Division(OIV.Inventor.SbVec4b,System.Int32)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.op_Division(OIV.Inventor.SbVec4b,System.Double)">
            <summary>
            The division operator (/) divides each components of vector <paramref name="v1"/> 
            by <paramref name="d"/>.
            </summary>
            <returns>Resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="d"/> equals to zero.</exception>
        </member>
        <member name="M:OIV.Inventor.SbVec4b.ConvertFrom``1(``0)">
            <summary>
            Try to convert a structure to an SbVec4b value type.
            </summary>
            <typeparam name="T"> Value type</typeparam>
            <param name="toConvert"> Value to convert</param>
            <exception cref="T:System.NotSupportedException"> Thrown when the conversion is not supported </exception>
            <returns></returns>
        </member>
        <member name="P:OIV.Inventor.SbVec4b.Item(System.Int32)">
            <summary>
            Gets or sets the vector component at the specified index.
            </summary>
            <param name="index">The zero-based index of the vector's component to get or set.</param>
            <returns>The vector component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If index if out of range.</exception>
        </member>
        <member name="P:OIV.Inventor.SbVec4b.X">
            <summary>
            Gets or sets the x component of vector.
            </summary>
            <value>X component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4b.Y">
            <summary>
            Gets or sets the y component of vector.
            </summary>
            <value>Y component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4b.Z">
            <summary>
            Gets or sets the z component of vector.
            </summary>
            <value>Z component of vector</value>
        </member>
        <member name="P:OIV.Inventor.SbVec4b.W">
            <summary>
            Gets or sets the w component of vector.
            </summary>
            <value>W component of vector</value>
        </member>
        <member name="T:OIV.Inventor.SbViewVolume">
            <summary>
            3D viewing volume class. 
            <para>
            Class used to represent a 3D viewing volume. This class is 
            used to represent viewing frusta and picking volumes. 
            For perspective projection, the view volume is a frustum. 
            For orthographic (parallel) projection, the view volume 
            is a rectangular prism. 
            </para>
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetMatrices(OIV.Inventor.SbMatrix@,OIV.Inventor.SbMatrix@)">
            <summary>
            Returns two matrices corresponding to the view volume. 
            </summary>
            <remarks>
            The first is a viewing matrix, which is guaranteed to be an 
            affine transformation. The second is suitable for use as a 
            projection matrix in OpenGL. The return value is the stereo 
            offset for a camera.
            </remarks>
            <param name="affine">Viewing matrix.</param>
            <param name="proj">Projection matrix.</param>
            <returns>Camera stereo offset.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetMatrix">
            <summary>
            Like the method <see cref="M:OIV.Inventor.SbViewVolume.GetMatrices(OIV.Inventor.SbMatrix@,OIV.Inventor.SbMatrix@)"/>, but returns the affine and projection 
            parts together in one matrix (i.e., <code>affine.MultRight(proj)</code> ).
            </summary>
            <returns>Combined affine and projection matrices.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetCameraSpaceMatrix">
            <summary>
            Returns a matrix that transforms the view volume into camera space: it 
            translates the view volume so the viewpoint is at the origin, and rotates it so 
            the view direction is along the negative z axis.
            </summary>
            <returns>Matrix value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectPointToLine(OIV.Inventor.SbVec2f@,OIV.Inventor.SbLine@)">
            <overloads>
            Maps a 2D point (in 0 &lt;= x,y &lt;= 1) to a 3D line.
            </overloads>
            <summary>
            Maps a 2D point (in 0 &lt;= x,y &lt;= 1) to a 3D line.
            </summary>
            <param name="pt">Point in normalized screen coordinates.</param>
            <param name="line">Output parameter to store the line value.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectPointToLine(OIV.Inventor.SbVec2f,OIV.Inventor.SbLine@)">
            <summary>
            Maps a 2D point (in 0 &lt;= x,y &lt;= 1) to a 3D line.
            </summary>
            <param name="pt">Point in normalized screen coordinates.</param>
            <param name="line">Output parameter to store the line value.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectPointToLine(OIV.Inventor.SbVec2f@,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <overloads>
            Maps a 2D point (in 0 &lt;= x,y &lt;= 1) to a 3D line.
            </overloads>
            <summary>
            Maps a 2D point (in 0 &lt;= x,y &lt;= 1) to a 3D line.
            </summary>
            <param name="pt">Point in normalized screen coordinates.</param>
            <param name="line0">Output parameter. Store one point which belong to the line.</param>
            <param name="line1">Output parameter. Store one point which belong to the line.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectPointToLine(OIV.Inventor.SbVec2f,OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Maps a 2D point (in 0 &lt;= x,y &lt;= 1) to a 3D line.
            </summary>
            <param name="pt">Point in normalized screen coordinates.</param>
            <param name="line0">Output parameter. Store one point which belong to the line.</param>
            <param name="line1">Output parameter. Store one point which belong to the line.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectToScreen(OIV.Inventor.SbVec3f)">
            <overloads> 
            Maps the 3D point in world coordinates to a 2D point in normalized screen 
            coordinates. 
            </overloads>
            <summary>
            Maps the 3D point in world coordinates to a 2D point in normalized screen 
            coordinates (0 &lt;= x,y,z &lt;= 1). The z-screen coordinate represents the 
            homogeneous z coordinate which goes (nonlinearly) from 0 at the near clipping 
            plane to 1 at the far clipping plane. 
            </summary>
            <param name="src">Point to project in world coordinates.</param>
            <returns>Projected point onto the near plane.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectToScreen(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)">
            <summary>
            Maps the 3D point in world coordinates to a 2D point in normalized screen 
            coordinates (0 &lt;= x,y,z &lt;= 1). The z-screen coordinate represents the 
            homogeneous z coordinate which goes (nonlinearly) from 0 at the near clipping 
            plane to 1 at the far clipping plane.
            </summary>
            <param name="src">Point to project in world coordinates.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectToScreen(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Maps the 3D point in world coordinates to a 2D point in normalized screen 
            coordinates (0 &lt;= x,y,z &lt;= 1). The z-screen coordinate represents the 
            homogeneous z coordinate which goes (nonlinearly) from 0 at the near clipping 
            plane to 1 at the far clipping plane.
            </summary>
            <param name="src">Point to project in world coordinates.</param>
            <param name="dst">Output parameter to store the result.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectFromScreen(OIV.Inventor.SbVec3f)">
            <overloads>
            Maps a 3D point in normalized screen coordinates (0 &lt;= x,y,z &lt;= 1) 
            to a 3D world point.
            </overloads>
            <summary>
            Maps a 3D point in normalized screen coordinates (0 &lt;= x,y,z &lt;= 1) 
            to a 3D world point.
            </summary>
            <remarks>
            See <see cref="M:OIV.Inventor.SbViewVolume.ProjectFromScreen(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)"/> 
            for more details.
            </remarks>
            <param name="src">Input point in normalized screen coordinates.</param>
            <returns>Point in world coordinates.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectFromScreen(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)">
            <summary>
            Maps a 3D point in normalized screen coordinates (0 &lt;= x,y,z &lt;= 1) 
            to a 3D world point.
            </summary>
            <remarks>
            <para>
            The resulting Z coordinate represents the normalized distance at which 
            the point would be back projected, ranging from 0 at the near clipping plane 
            to 1 at the far clipping plane. 
            This method is simply the inverse of <see cref="M:OIV.Inventor.SbViewVolume.ProjectToScreen(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)"/>.  
            See also <see cref="M:OIV.Inventor.SbViewVolume.GetPlanePoint(System.Single,OIV.Inventor.SbVec2f@)"/>.
            </para>
            <para>
            Note: This is a convenience function that calls the <see cref="M:OIV.Inventor.SbViewVolume.GetMatrix"/>
            method and apply <see cref="M:OIV.Inventor.SbMatrix.Inverse"/> on it, then transforms the point.
            The <see cref="M:OIV.Inventor.SbViewVolume.GetMatrix"/> and  <see cref="M:OIV.Inventor.SbMatrix.Inverse"/> calls are somewhat 
            expensive, so if you need to project a large number of points you should call these
            methods just once and apply the matrix to each point using 
            <see cref="M:OIV.Inventor.SbMatrix.MultVecMatrix(OIV.Inventor.SbVec3f@,OIV.Inventor.SbVec3f@)"/>.
            </para>
            </remarks>
            <param name="src">Input point in normalized screen coordinates.</param>
            <param name="dst">Output point in world coordinates.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetPlane(System.Single)">
            <summary>
            Returns a plane parallel to the near (or far) 
            plane of the view volume at a given distance from the 
            projection point (eye).
            </summary>
            <param name="distFromEye">Distance from eye of requested plane.</param>
            <returns>Plane value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetSightPoint(System.Single)">
            <summary>
            Returns the point along the line of sight 
            at the given distance from the projection point (eye).
            </summary>
            <param name="distFromEye">Distance from eye of requested point.</param>
            <returns>Point value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetPlanePoint(System.Single,OIV.Inventor.SbVec2f@)">
            <overloads>
            Returns the projection of a given point in normalized 
            screen coordinates. 
            </overloads>
            <summary>
            Returns the projection of a given point in normalized 
            screen coordinates (<seealso cref="M:OIV.Inventor.SbViewVolume.ProjectToScreen(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)"/>) 
            onto the plane parallel to the near plane that is at <paramref name="distFromEye"/> units from the eye.
            </summary>
            <param name="distFromEye">Distance from eye of projection plane.</param>
            <param name="normPoint">Point in normalized screen coordinates to project.</param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetPlanePoint(System.Single,OIV.Inventor.SbVec2f)">
            <summary>
            Returns the projection of a given point in normalized 
            screen coordinates (<seealso cref="M:OIV.Inventor.SbViewVolume.ProjectToScreen(OIV.Inventor.SbVec3f,OIV.Inventor.SbVec3f@)"/>) 
            onto the plane parallel to the near plane that is at <paramref name="distFromEye"/> units from the eye.
            </summary>
            <param name="distFromEye">Distance from eye of projection plane.</param>
            <param name="normPoint">Point in normalized screen coordinates to project.</param>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetAlignRotation">
            <summary>
            Calls <code>GetAlignRotation(false)</code>. 
            <seealso cref="M:OIV.Inventor.SbViewVolume.GetAlignRotation(System.Boolean)"/>
            </summary>
            <returns>Rotation value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetAlignRotation(System.Boolean)">
            <summary>
            Returns a rotation that would align a viewed object so that 
            its positive x-axis (of its object space) is to the right 
            in the view and its positive y-axis is up.
            </summary>
            <remarks>
            If <paramref name="rightAngleOnly"/> is <b>true</b>, it will 
            come as close as it can to this goal by using only 90 degrees 
            rotations.
            </remarks>
            <param name="rightAngleOnly">If <b>true</b>, use only 90 degrres rotation
            to perform action.</param>
            <returns>Rotation value.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetWorldToScreenScale(OIV.Inventor.SbVec3f@,System.Single)">
            <overloads>
            Returns a scale factor that would scale a unit sphere. 
            </overloads>
            <summary>
            Returns a scale factor that would scale a unit sphere centered at 
            <paramref name="worldCenter"/>.
            </summary>
            <remarks>
            The sphere would appear to have the 
            given <paramref name="radius"/> in normalized screen coordinates 
            when projected onto the near plane.
            </remarks>
            <param name="worldCenter">Center in world coordinates.</param>
            <param name="radius">Radius in normalized screen coordinates.</param>
            <returns>Scale factor.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetWorldToScreenScale(OIV.Inventor.SbVec3f,System.Single)">
            <summary>
            Returns a scale factor that would scale a unit sphere centered at 
            <paramref name="worldCenter"/>.
            </summary>
            <remarks>
            The sphere would appear to have the 
            given <paramref name="radius"/> in normalized screen coordinates 
            when projected onto the near plane.
            </remarks>
            <param name="worldCenter">Center in world coordinates.</param>
            <param name="radius">Radius in normalized screen coordinates.</param>
            <returns>Scale factor.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectBox(OIV.Inventor.SbBox3f)">
            <overloads>
            Project a given 3D bounding box onto the near plane. 
            </overloads>
            <summary>
            Projects the given 3D bounding box onto the near plane and returns the size (in 
            normalized screen coordinates) of the rectangular region that encloses it.
            </summary>
            <param name="box">Box to project.</param>
            <returns>Size of the rectangular region that encloses the <paramref name="box"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ProjectBox(OIV.Inventor.SbBox3f@)">
            <summary>
            Projects the given 3D bounding box onto the near plane and returns the size (in 
            normalized screen coordinates) of the rectangular region that encloses it.
            </summary>
            <param name="box">Box to project.</param>
            <returns>Size of the rectangular region that encloses the <paramref name="box"/>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetProjectedBbox(OIV.Inventor.SbBox3f@)">
            <summary>
            Projects the given 3D bounding box onto the near plane.
            </summary>
            <param name="box">Box to project.</param>
            <returns>Projected box in in normalized screen coordinates.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetProjectedBbox(OIV.Inventor.SbMatrix@,OIV.Inventor.SbBox3f@)">
            <summary>
            Projects the given 3D bounding box onto the near plane.
            </summary>
            <param name="affineProj">Affine and projection matrix.</param>
            <param name="box">Box to project.</param>
            <returns>Projected box in in normalized screen coordinates.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Narrow(System.Single,System.Single,System.Single,System.Single)">
            <summary>Narrows the view to the given sub-rectangle. </summary>
            <remarks>
            Given a view volume, narrows the view to the given sub-rectangle 
            of the near plane. The coordinates of the rectangle are between 
            0 and 1, where (0,0) is the lower-left corner of the near plane 
            and (1,1) is the upper-right corner.
            </remarks>
            <param name="left">Left coordinate.</param>
            <param name="bottom">Bottom coordinate.</param>
            <param name="right">Right coordinate.</param>
            <param name="top">Top coordinate.</param>
            <returns>Narrowed view volume.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Narrow(OIV.Inventor.SbBox3f@)">
            <overloads>
            Narrows a view volume by the given box.
            </overloads>
            <summary>
            Narrows a view volume by the given box. 
            </summary>
            <remarks> 
            The box must lie inside the unit cube, 
            and the view will be shrunk according to the size of the box.
            </remarks>
            <param name="box">Box used to narrow the volume.</param>
            <returns>Narrowed view volume.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Narrow(OIV.Inventor.SbBox3f)">
            <summary>
            Narrows a view volume by the given box. 
            </summary>
            <remarks> 
            The box must lie inside the unit cube, 
            and the view will be shrunk according to the size of the box.
            </remarks>
            <param name="box">Box used to narrow the volume.</param>
            <returns>Narrowed view volume.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets up an orthographic view volume with the given sides. 
            </summary>
            <remarks>
            The parameters are the same as for the OpenGL glOrtho() routine.
            </remarks>
            <param name="left">The coordinate for the left-vertical clipping plane.</param>
            <param name="right">The coordinates for the right-vertical clipping plane.</param>
            <param name="bottom">The coordinate for the bottom-horizontal clipping plane.</param>
            <param name="top">The coordinate for the top-horizontal clipping plane.</param>
            <param name="nearPlane">The coordinate of the near clipping plane. The 
            coordinate is negative if the plane is behind the viewer.</param>
            <param name="farPlane">The coordinate of the far clipping plane. The 
            coordinate is negative if the plane is behind the viewer.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets up a perspective view volume with the given field of view and aspect ratio. 
            </summary>
            <remarks>
            The parameters are the same as for the OpenGL gluPerspective() routine, 
            except that the field <paramref name="fovy"/> is specified in radians.
            </remarks>
            <param name="fovy">The field of view angle, in radians, in the y-direction.</param>
            <param name="aspect">The aspect ratio that determines the field of view in the 
            x-direction. The aspect ratio is the ratio of x (width) to y (height).</param>
            <param name="nearPlane">The distance from the viewer to the near clipping plane (always positive).</param>
            <param name="farPlane">The distance from the viewer to the far clipping plane (always positive).</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Alternate way to Set up a perspective view volume. 
            </summary>
            <remarks>
            The parameters are 
            the same as for glFrustum, which allows an asymmetric view frustum. 
            This is specifically useful for transferring the definition of a view 
            volume from another package.
            </remarks>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.RotateCamera(OIV.Inventor.SbRotation@)">
            <overloads>
            Rotate the camera view direction.
            </overloads>
            <summary> 
            Rotate the camera view direction. 
            </summary>
            <remarks> 
            Note that this accomplishes 
            the reverse of doing an OpenGL glRotate() command after 
            defining a camera, which rotates the scene viewed by the camera.
            </remarks>
            <param name="r">Value of viewpoint rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.RotateCamera(OIV.Inventor.SbRotation)">
            <summary> 
            Rotate the camera view direction. 
            </summary>
            <remarks> 
            Note that this accomplishes 
            the reverse of doing an OpenGL glRotate() command after 
            defining a camera, which rotates the scene viewed by the camera.
            </remarks>
            <param name="r">Value of viewpoint rotation.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.TranslateCamera(OIV.Inventor.SbVec3f@)">
            <overloads>
            Translate the camera viewpoint.
            </overloads>
            <summary>
            Translate the camera viewpoint. 
            </summary>
            <remarks>Note that this accomplishes 
            the reverse of doing an OpenGL glTranslate() command after 
            defining a camera, which translates the scene viewed by the camera.
            </remarks>
            <param name="v">Value of viewpoint translation.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.TranslateCamera(OIV.Inventor.SbVec3f)">
            <summary>
            Translate the camera viewpoint. 
            </summary>
            <remarks>
            Note that this accomplishes 
            the reverse of doing an OpenGL glTranslate() command after 
            defining a camera, which translates the scene viewed by the camera.
            </remarks>
            <param name="v">Value of viewpoint translation.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ZVector">
            <summary>Returns the positive z axis in eye space.</summary>
            <remarks>
            In this coordinate system, the z value 
            of the near plane should be greater than the z value of the far plane.
            </remarks>
            <returns>Positive z axis in eye space.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ZNarrow(System.Single,System.Single)">
            <summary>
            Computes a narrowed view volume. 
            </summary>
            <remarks>
            Computes a narrowed view volume which contains as tightly as possible the given 
            interval on the z axis (in eye space). The returned view volume will never be 
            larger than the current volume, however. <paramref name="nearPlane"/> and 
            <paramref name="farPlane"/>are given in terms of <see cref="M:OIV.Inventor.SbViewVolume.ZVector"/>: 
            this means that <paramref name="nearPlane"/> &gt; <paramref name="farPlane"/> must hold.
            </remarks>
            <param name="nearPlane">Near plane distance.</param>
            <param name="farPlane">Far plane distance.</param>
            <returns>Narrowed view volume.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Scale(System.Single)">
            <summary>
            Scales width and height of view volume by given factor.
            </summary>
            <param name="factor">Width and height scale factor.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ScaleWidth(System.Single)">
            <summary>
            Scales the view volume. 
            </summary>
            <remarks>
            Scales view volume to be the given <paramref name="ratio"/> of its current width, 
            leaving the resulting view volume centered about the same point 
            (in the near plane) as the current one.
            </remarks>
            <param name="ratio">Width scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.ScaleHeight(System.Single)">
            <summary>
            Scales the view volume. 
            </summary>
            <remarks>
            Scales view volume to be the given <paramref name="ratio"/> of its current height, 
            leaving the resulting view volume centered about the same 
            point (in the near plane) as the current one.
            </remarks>
            <param name="ratio">Height scale value.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetProjectionType">
            <summary>
            Use ProjType property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetProjectionPoint">
            <summary>
            Use ProjectionPoint property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetProjectionDirection">
            <summary>
            Use ProjectionDir property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetNearDist">
            <summary>
            Use NearDist property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetWidth">
            <summary>
            Use Width property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetHeight">
            <summary>
            Use Height property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetDepth">
            <summary>
            Use Depth property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.SetStereoAbsoluteAdjustments(System.Boolean)">
            <summary>
            Use StereoAbsoluteAdjustments property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.IsStereoAbsoluteAdjustments">
            <summary>
            Use StereoAbsoluteAdjustments property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetStereoAdjustment">
            <summary>
            Use StereoAdjustment property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.SetBalanceAdjustment(System.Single,System.Boolean)">
            <summary>
            Sets the parallax balance.
            </summary>
            <param name="adjustment">Adjustment value.</param>
            <param name="nearFrac">If <b>true</b>, <paramref name="adjustment"/> 
            is interpreted as a fraction of the camera near distance.</param>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetBalanceAdjustment">
            <summary>
            Use BalanceAdjustment property instead.
            </summary>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.IsBalanceNearFraction">
            <summary>
            Use BalanceNearFraction property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetStereoMode">
            <summary>
            Use StereoView property instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Equals(OIV.Inventor.SbViewVolume@,System.Single)">
            <overloads>Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </overloads>
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="v">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="v"/> is a <see cref="T:OIV.Inventor.SbViewVolume"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Equals(OIV.Inventor.SbViewVolume,System.Single)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object 
            with given tolerance. 
            </summary>
            <param name="v">An object to compare to this instance.</param>
            <param name="tolerance">Acceptable tolerance for equality test.</param>
            <returns><b>true</b> if <paramref name="v"/> is a <see cref="T:OIV.Inventor.SbViewVolume"/> and has 
            the same value as this instance within the given tolerance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><b>true</b> if <paramref name="obj"/> is a <see cref="T:OIV.Inventor.SbViewVolume"/> and has 
            the same value as this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.op_Equality(OIV.Inventor.SbViewVolume,System.Object)">
            <summary>
            The equality operator.
            </summary>
            <returns><b>true</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.op_Inequality(OIV.Inventor.SbViewVolume,System.Object)">
            <summary>
            The inequality operator.
            </summary>
            <returns><b>false</b> if <paramref name="o1"/> and <paramref name="o2"/> are equals, 
            <b>true</b> otherwise.</returns>
        </member>
        <member name="M:OIV.Inventor.SbViewVolume.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.ProjType">
            <summary>
            Gets the current projection type.
            </summary>
            <value>Projection type.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.ProjectionPoint">
            <summary>
            Gets the projection point.
            </summary>
            <value>Projection point.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.ProjectionDir">
            <summary>
            Gets the projection direction.
            </summary>
            <value>Projection direction.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.NearDist">
            <summary>
            Gets the distance from projection point to near plane.
            </summary>
            <value>Distance from projection point to near plane.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.Width">
            <summary>
            Gets the width of viewing frustum.
            </summary>
            <value>Width of viewing frustum.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.Height">
            <summary>
            Gets the height of viewing frustum.
            </summary>
            <value>Height of viewing frustum.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.Depth">
            <summary>
            Gets the depth of viewing frustum.
            </summary>
            <value>Depth of viewing frustum.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.StereoAbsoluteAdjustments">
            <summary>
            Specifies that stereo adjustments are absolute. <b>false</b> by default.
            </summary>
            <remarks>
            <para> 
            Stereo offset is the distance of each eye from the camera position.
            The right eye is moved plus offset and the left eye is moved minus offset.
            </para> 
            
            <para>
            Stereo balance sets the position (distance from the eye) of the zero parallax plane.
            </para> 
            
            <para>
            The non-absolute mode allows the stereo settings
            to be valid over a range of different view volume settings. If
            you chose absolute mode, you are responsible for modifying the
            stereo settings (if necessary) when the view volume changes.
            </para>
            
            <para>
            When sets to true, stereo offset and balance are used as follows
            for the right eye view:
            <code>
            StereoCameraOffset = StereoAdjustment;
            FrustumAsymmetry   = BalanceAdjustment;
            
            glTranslated (-StereoCameraOffset, 0, 0);
            glFrustum (FrustumLeft + FrustumAsymmetry, FrustumRight + FrustumAsymmetry, 
                       FrustumBottom, FrustumTop, NearClipDistance, FarClipDistance);
            </code>
            The left eye view is symmetric.
            </para>
            
            <para>
            When sets to false, stereo offset and balance are used as follows for the
            right eye view:
            </para>
            <para>
            Xrange is right minus left (i.e., first two arguments of glFrustum) and 
            multiply that difference by the ratio of the distance to the desired plane 
            of zero parallax to the near clipping plane distance.
            </para>
            <code>
            StereoCameraOffset   = Xrange * 0.035 * getStereoAdjustment();
            FrustumAsymmetry     = -StereoCameraOffset * getBalanceAdjustment();
            ZeroParallaxDistance = (NearClipDistance + FarClipDistance)/0.5;
            
            FrustumAsymmetry *= NearClipDistance / ZeroParallaxDistance;
            
            glTranslated (-StereoCameraOffset, 0, 0);
            glFrustum (FrustumLeft + FrustumAsymmetry, FrustumRight + FrustumAsymmetry, 
                       FrustumBottom, FrustumTop, NearClipDistance, FarClipDistance);
            </code>
            The left eye view is symmetric.
            </remarks>
            <value><b>true</b> if stereo adjustments are absolute, <b>false</b> otherwise.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.StereoAdjustment">
            <summary>
            Gets or sets the stereo offset. <seealso cref="P:OIV.Inventor.SbViewVolume.StereoAbsoluteAdjustments"/>.
            </summary>
            <value>Stereo offset.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.BalanceAdjustment">
            <summary>
            Gets the parallax balance. <seealso cref="M:OIV.Inventor.SbViewVolume.SetBalanceAdjustment(System.Single,System.Boolean)"/>.
            </summary>
            <value>Parallax balance.</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.BalanceNearFraction">
            <summary>
            Flag which indicates if the stereo balance adjustment is defined as a fraction
            of the camera near distance.
            </summary>
            <value><b>true</b> when stereo balance adjustment is defined as a fraction
            of the camera near distance</value>
        </member>
        <member name="P:OIV.Inventor.SbViewVolume.StereoView">
            <summary>
            Gets or sets the stereo mode.
            </summary>
            <value>Stereo mode. <seealso cref="T:OIV.Inventor.SbViewVolume.StereoMode"/>.</value>
        </member>
        <member name="T:OIV.Inventor.SbViewVolume.ProjectionType">
            <summary>
            Projection types
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbViewVolume.ProjectionType.ORTHOGRAPHIC">
            <summary>
            Orthographic projection.
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbViewVolume.ProjectionType.PERSPECTIVE">
            <summary>
            Perspective projection. 
            </summary>
        </member>
        <member name="T:OIV.Inventor.SbViewVolume.StereoMode">
            <summary>
            Stereo modes.
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbViewVolume.StereoMode.MONOSCOPIC">
            <summary>
            Monoscopic (i.e., non-stereo) viewing.
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbViewVolume.StereoMode.LEFT_VIEW">
            <summary>
            Left eye view.
            </summary>
        </member>
        <member name="F:OIV.Inventor.SbViewVolume.StereoMode.RIGHT_VIEW">
            <summary>
            Right eye view.
            </summary>
        </member>
    </members>
</doc>
